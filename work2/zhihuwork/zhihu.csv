问题名,问题具体内容,回答信息
室友想抄我的代码，给还是不给?,"一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。
而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡
但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？","给，但是换一种方式，别微信传，也别U盘。
Github上创建一个Repository，先空着。让他Star你。当然他一个人还不够，让他想办法发动更多人去Star。
超过10 Star，你就把代码Push上去，然后让他Fork。
超过100 Star，都不用他修改变量名，服务到家，你帮他改。然后用他的Github账号Pull Request。
这个Repository留着，以后学弟学妹们都用的到。平时Private，有人找你要代码，就把他加为Collaborator。这就是Github允许私有仓库人数无限制的福利。
这么多Star不仅仅是数字，而是你毕业找工作时简历上最亮的那颗Star。记得找工作期间Make Public。
不是开玩笑，如果我是大学老师，我就要求学生这样交代码作业。这是程序员的必备技能。我会给每一个班创建一个Organization，他们交作业我都知道，代码有问题就发Issue。全专业的学生互相Follow，谁的代码写得好，大家就Star。下次上课，我可以打开Github，讲评一下比较好的代码，也可以让同学们互相学习和评价别人的代码。
大一新生入学，先学习Github的基本用法，然后一项练习就是Star学长们的Repository，为他们找工作贡献一份自己的力量，这个优良传统一届一届传承下去...
软件程序的一个根本特征就是可复制性，这是其他行业没有的特质。开放源代码也是目前软件产业发展的一个主要驱动力。应该让即将从事这个行业的新人们更早更深刻的认识到软件可复制可分享的本质特点。
关于如何最方便的浏览GitHub上的源代码，我之前专门写过文章。这里只给一个最简单最酷的办法，看这个视频：
00:28
浏览Github源代码
演示的是浏览LInux一个C程序代码。
只需要把http://github.com换成github.githistory.xyz就可以浏览当前源代码文件以及它的历史变更。","我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。
话说。。当年的代码写的真是烂啊。。。","当然可以给，但是建议你在代码里做点手脚。
最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。
/*
 * 作业：***
 * 作者：哆啦A梦
 * 时间：2019-6-17 11:30
 * 版权所有，盗版必究
 */

#include <iostream>

#define ___AUTHOR___IS___DORAEMON___ // 这里也是在说明作者是谁

// 再下面写程序代码就好了
对于那种稍微警觉一点的，会复查源代码的室友，会把以上注释去掉，甚至换成自己的注释，到头你反而解释不清楚了。这时候就需要将版权声明放在稍微隐蔽一点的地方。比如，使用 ASCII 码来代替纯粹的英文字符，将版权声明隐蔽到运行结果里。
#include <iostream>

int main(void) {
    // 下面这段字符串的值是 FROM: DORAEMON，就是各个字母的 ASCII 码。
    // 这句注释只是我来向大家解释这段代码是什么意思的，实际操作时千万别写
    char a[] = {70, 82, 79, 77, 58, 32, 68, 79, 82, 65, 69, 77, 79, 78, 0};
    std::cout << a << std::endl; // 打印版权信息

    // 在下面写程序代码
} // main()
这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。
但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件触发器，超过指定的时间才显示版权信息！
#include <iostream>
#include <ctime>

int main(void) {
    char a[] = {70, 82, 79, 77, 58, 32, 68, 79, 82, 65, 69, 77, 79, 78, 0};
    // 1560816000 是北京时间 2019 年 6 月 18 日 8 时的 Unix 时间戳，以下代码的作用是
    // 仅当系统时间在 2019 年 6 月 18 日 8 时之后才打印版权信息。
    if (std::time(0) > 1560816000) {
        std::cout << a << std::endl;
    } // if (std::time(0) > 1560816000)

    // 在下面写程序代码
} // main()
如此，就既不丢人情，也不怕被卷入抄袭风波了。
更新：补充 cout 和 endl 前漏写的 std 命名空间。","现有回答的答案都服务太不到位了。
岂止是要给啊，还要为了不让老师看出来，给改好了再给。

想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。
然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）
于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）
等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。
要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？

所以，要给。如果有精力还要多给几份，多改改。
这是不可多得的练习重构代码的机会。

一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？

至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。","某些高赞是想让题主死吗……
伤害室友感情级别，由低到高：
1、给他抄。
2、给他抄，但附加合理的收费。
3、不给抄，但提供帮助/思路
4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）
5、犹豫且模棱两可的拒绝。
6、用拙劣的借口拒绝。
7、拒绝并附带嘲讽（划水挂科活该，您配吗？）
8、爽快答应，但暗中使用手段，使室友被查出抄袭。

你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）
但你要是答应给他抄，然后背后捅刀子，别说这段友情必然凉凉，你的臭名甚至会传遍整个专业整个学校。大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。
做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。
那可真的是药丸了。","当年学期末邻近，编译原理大作业让写个C0或者P0编译器。我上网找了个c实现的p0编译器，花了两天看了一遍，自己用Java重写了一份，打包上传交差。注意，我的版本是运行在命令行的。
室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。
隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。
结果你猜怎么着？？

我60分，室友80分，隔壁那货95分。
所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，诚不我欺。
你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。
PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。","你放到github上，贴上一个gpl协议，告诉舍友地址。
你维护的开源项目对吧，也有你的维护记录，老师也能看得到。","想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔古井无波。。。
小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。
真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！
（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）
广告
色情片如何损伤你的大脑？
作者 柳叶锈刀
¥9.90
去查看","给。
大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。
后来我创业，室友从上海赶到北京帮我做了3个月。
我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？","我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来
时间长了，他们也就都只问我思路了
关系好的关系不好的知道我这么严肃
也就不想抄了
更新分界线
我的回答的核心就是“要自己学会，自己懂”
以下是一个栗子
我努力往好的方向带别人
难道不好么？"
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。,"IT界有个万人皆知的行业准则：不要重复造轮子。
它的意思是，你可以自己造的玩，但是如果人家已经有足够好的轮子，你就不要试图，甚至是通过各种手段，试图去取代这个轮子的地位。
同理，如果某个学科已经有足够好的教材，您没那水平编出更好的教材，就乖乖地用人家的教材就好了，这样既节省资源，同时也能保证中国学生看到的教材内的思想和国外学生是同步的。
中国大学有个毛病，就是什么东西也想搞个自己的出来。
就比如线性代数教材，如此重要的学科，用脚趾头也能想见，优秀的国外教材已经遍地走了，但是各个大学仍然要请自己学校的某几个水平堪忧，语言表达能力菜得扣脚的老师来编写一个教材，最后命其名曰“精品教材”，而这些垃圾教材坑害的是一批一批的优秀学生，当然如果能被一直坑下去的，自主学习能力也是有点问题...
可是世界上大多数学生就是这样，他们会乖乖地去上课，听老师念PPT，然后认真看学校推荐用的课本，然后当这些垃圾教材搞得他们一头雾水的时候，他们会用“这门课难”来安慰自己，最后学的不明不白，草草了事。
我刚来中国科学技术大学的时候，上学期的线性代数，学校用的教材就是所谓学校老师自己编的“精品教材”，这个教材是面向非数学专业学生的，我就看了三页就已经搞不明白它在说什么了，可以想象，这样的教材迫害了多少学生，耗费了多少学生的时间。
而且可以想象，编这本教材的老师们从中肯定可以得到补贴，能不能得到版税不清楚，但是补贴是肯定有的，而且同时这本教材的编写也能成为所谓的资金申请的理由，“为中国科学技术大学量身定制的教材”这句话多么好听啊，可事实上呢？
由于答主英文水平过关，当时直接去图书馆借了一本英文的线性代数教材，面向数学专业的，从第一页开始看下去，便已停不下来，连住一看就是二三十页，看完感觉畅酣淋漓，舒畅至极，从那以后，线性代数课我再也没去过，除了最后的考试我出席了。
那次期末题不简单，我考了95分。
线性代数资源推荐，详情参见本人文章：
我自己知道，我并不聪明，若是我不看那本英文教材，我恐怕能考70分不错了。
这就是事实，还有很多例子，比如贵校叶邦角编的的《电磁学》和格利菲斯的《电动力学》在易懂性和深刻性上的巨大差异，前者啥也看不懂，后者看的畅酣淋漓。
《大学物理》与《费恩曼物理学讲义》的惊人对比，前者看的想要睡觉，后者看的我想要拍桌，甚至感动地流泪，甚至看完兴奋地睡不着觉。
附费恩曼讲义的链接：
The Feynman Lectures on Physics
纸质教材？？买教材？？学校让你买教材？？没有学生买教材，那这些教材不就无法带来收入了？
教材是用来教育的？No No No, 教材是用来挣钱的，相信我。
马克思主义原理你们都上过吧？这个教材是不是必须买？它为什么不做成pdf版，在网上开源呢？
每年这本教材能卖一千万册吧？没这些钱谁来养那些教材编写委员会呢？
李重光的乐理书，可能在你们眼里还算不错，但是我看完之后还是搞不明白它说的这一切是怎么运用在作曲中的，后来我有了VPN，在油管上打开了新世界，在众多即兴，乐理的视频教程中，我现在可以在任何一首歌里面即兴演奏，写歌也是手到擒来。
音乐学习的最好方法不是看书，而是看视频，因为视频是声音和图像的结合体，比如我现在讲Lydian音阶，它的音阶结构是 1 2 3 #4 5 6 7，只讲这个其实你并没有真正懂它的音响效果，这个youtube频道从图像，PPT，演奏示例，记忆法等如手，教你如何记忆指板位置，如何进行特定和声进行下的solo即兴和创作。
详情参见本人文章：
这个世界上不存在真正无法理解的知识，只存在不会表达的糟糕教学者，大家都是人，为什么你能懂的东西我就懂不了呢？就算我笨一些，能在你脑子里运行的东西也能在我的脑子里运行，只不过可能速度慢一些。
教材的目的是什么？教材的目的是让学生尽可能地不依靠任何外界帮助，仅仅依靠你的教材就能学会你想表达的知识。
可以说，我国在此方面做的奇差无比。
国内这些教材其实牵动了很多人的利益，比如学校的利益，编写者的利益等等，中国的大学可能觉得教材都用西方的，是文化不强盛的表现，总想自己搞一个，这正是不自信的表现。
你要是能编出比国外优秀教材更优秀的，那完全可以啊！
问题是你能吗？
当然还有一点就是，国内的教材更新速度捉急，很多新东西早就出来了，教材上还写着那些旧东西，考试还是按照这个教材考...
我一直觉得中国学生整体上是比较聪明的，如果我们能像美国学生那样直接接触到整个世界的优质教学信息，那我们的未来不敢想象。
不过一个学生如果自己不会去寻求改变，看的破教材还不知道换更好的，上不了Google还不舍得花钱买V*N，那这样的学生可能也干不成什么...
国外的大部分经典教材，我是说经典教材哦，不是所有！！经典教材是国外教材的一个很小的子集！ 差不多都有免费的pdf版本，直接下载就好，这对于那些没有机会接受高等教育，又买不起好教材的人是很友好的，而且不仅如此，教材配套的习题集，答案等往往也可以直接下载，反观国内的教材，一方面习题没答案，然后老师告诉你们习题最怕有答案，但与此同时老师也没有能力建立起一个足够高效的机制能马上让学生知道他们的结果是否正确，就相当于，不能给你肉吃，还要叫你多吃素，吃肉会长胖。
普林斯顿的《Algorithms 4》是业内广受好评的教材，虽然叫算法，事实上数据结构和算法的内容都有，网址：
Algorithms, 4th Edition
在页面的左边，可以直接这样寻找自己想要的内容，发挥了电子图书的优势，节省了搜索目录的时间。
归并算法
在归并算法的讲解中，可以直接点击Merge.java跳转至实现该ADT的代码：
这就是我为什么不喜欢看纸质书，因为太麻烦了...翻来翻去的，真的累。
这本书有一个标准库，有绘图，排序等等，你可以直接在左下方搜索标准库里的某个API，看到该API的官方文档。
搜索栏
测试用例，作业，PPT等等，都直接点击就好。
我试问国内的哪个计算机教材这样做了？你恐怕是下载个pdf版都得在什么微盘，百度云，或是百度文库里面下载吧？
来，你告诉我，谭浩强的《C语言程序设计》的开源网站在哪？让我瞻仰一下？没有？
哦。
我觉得国内教材编写者最大的问题就是：动机不纯。
对于音乐行业来讲，如果教材编的太好，学生就不想找老师了...那这些音乐水平高不成低不就的人，饭碗谁给保证呢？
这个逻辑其实挺简单的，就是：你说想要看懂这个教材必须找个好老师给你讲，那你这个所谓的好老师为啥不把他讲的写成教材呢？这样大家不是就都看懂了？哪来那么多麻烦事？
事实上一个人编写的教材应该是比这个讲课要更好懂的，因为一个人写出来的东西往往是经过了细致思考的结果，而凭空就说的东西往往会出问题，那如果一个人教材写的奇烂无比，他的课我也建议你别去了，误人子弟。
所以啊，现在掌握大学权力的人，都是高考刚恢复不就参加高考的那批人，他们眼中的世界和我们年轻人眼中的不太一样，再过二十年，等我们成为了掌权者，也许这一切会变好。
学校怎么做是学校的事，你怎么做，还是看你自己。
谢谢。
>欢迎大家参加我的Live, 本次Live将与大家一同探讨编程学习之最优方案, 届时将分享一大波开源优质教材!!!!

看了大家的回复和评论，我挺开心的，这个答案火也是意料之中，但是能获得这么多人的认同，我深表荣幸，有人说英语差看不了英文教材的，我想说，英语的学习其实是自然而然地事情，不要在学中做，而要在用中学，忘掉中文，去完全投入英文的环境中，很快你就会适应这一切。事实上，如果你说你英文教材有些单词不认识，那我想反问你，难道这个东西翻译成中文你就一定认识了？比如线性代数的秩（Rank），你不知道秩是什么意思对吧？但你反而大概知道Rank的意思。
还有人说，我们不能这样直接用别人的，要做出自己的，这个想法其实要真往大了说，我觉得挺肤浅的，别人造个加速器，我们要造个更大的，别人造个桥，我们也要造个更长的，快歇歇吧，干好自己的本职工作就很好了。
世界上只有两种东西有真正的价值，一种是创世人所未见，一种是对已见之事的推进与优化，做一个比现有的还烂的东西，本身是没价值的，只能当作练习使用，这句话的逻辑已经很明晰了，再反驳我是不会回复的。
不要过分相信教材的权威性，也不要把老师和教授当神看，大家都是普通人，老师让你做的，也许并不是你想要的，我们生在互联网时代，已经给了我们擦亮眼睛，检验真理的能力了，我们也没必要迷信任何权威。
这世界上谎言很多，要把眼睛擦亮，做个明白人。
第二次修改答案，给大家看看如何击退杠精：
用一种调侃的语气顺着杠精说，他们就噎着说不出话了~
杠精快来~我不怕~","这个答案请勿转载。

我打个比方，大家看完我讲的之后（哪怕看似与计算机无关）、估计就能想明白怎回事了。

国内的音乐理论逻辑体系基本上就是在「李重光＋斯波索宾」这两套教材构筑的。
可能也有其它的音乐理论教材，但基本上都围绕这一套展开。
特别是斯波索宾，从苏联体系而来。
知乎有很多对这些教材的短版的讨论，我就不赘述了。

我本科是在加拿大读的（Digital Audio Arts 专业，学位是 Bachelor of Music），现已毕业了。
在本科阶段，拯救了我调性和声理论学习的，是岛冈让的《総合和声：実技・分析・原理》。
（完全模组化设计，自学者可以自己安排学习节奏、且书中的三大部分彼此互补。）
我惊讶於世间居然有对自学者如此友好的音乐理论教材，
忽然想起我首次出国之前看李重光乐理半天看不懂的样子，似乎明白了些什么。

之后一段时间内，我在知乎推荐岛冈让的《総合和声：実技・分析・原理》这套教材，
也有想著有朝一日等自己日语精进到一定地步了、就考虑翻译这本教材。
但我现在多了几份恐惧。

我在回答某些乐理问题时，很多人说我自造术语、甚至有人专门以此攻击我。
我专门买来斯波索宾的教材的简体中文译本（现在被我扔在加拿大了），才发现：
岛冈让的教材当中的术语逻辑体系，与国内现行这套苏修型音乐理论术语逻辑体系，有明显差异。

我忽然意识到：
国内这些对自学者不友好的教材所以能被推荐为圭臬，也是和某一群人的利益有关：
国内这么多音乐老师（无论是院校老师、还是面向大学外招各种年龄段的钢琴学生的老师），
当中肯定是有一定比例的人受益于下面这个现状：
「国内能买到的中文教材，大多都需要老师点拨讲解、才能让你看懂。」
我也有好几次见到与斯波索宾的和声教材有关的评论说「必须得找个好老师给你讲」。
万一有人要是将岛冈让这本书（或者同种类型的优秀教材）翻译成中文引入国内，岂不是要砸了那群人的饭碗？
毕竟，优秀的音乐教育资源，在中国，非常希缺。
剩下的那群人，要用最少的成本保住自己的饭碗，最直接的方式，就是在这个圈子里面搞封闭。
（看看 Arnold Schoenberg 的「Harmonielehre」的英文翻译，再看看简体中文译本，对比下后者少了什么，你必会有所发现。至少，我不认为「用目标语言写个 summary」就可以叫翻译了。）

在中国，从来不缺业馀钢琴10级的人，
但他们当中能够对乐曲的（包括曲式与和声在内的）格物致知能力的好坏，又是一个未知数。
而且他们往往也是师出那些和他们一样的前辈之手：
只知道怎么演奏好一个乐器，但对音乐的赏识能力仍旧是个问题。
这些人当中，有些人可能热爱音乐，有些可能只是方便给他父母脸上贴几年的金。
这些都是产业。
破坏行业的事情，这业内会有谁乐意去做呢？会有谁乐见于这种事情成事呢？

回到正题，大家能想明白为什么很多大学教编程必须 Visual Studio 6 和 C 语言了吧？
（C 语言不是所有专攻方向都需要的；VS6 包括 VB6 和 VC++6。）
哪怕咱们大陆的资讯电子类专业出身的人们自学能力再高强，
也很难改变这群大学教师「决定教什么」。

P.S.: 对于谭本人这本书怎样，请不要与我探讨。
我只负责对那些三缺帐号们（专门新注册来的水军）批次封锁、清空其评论。
可能你觉得容易学，但没准是你老师点拨得好、或者你之前的学习经历帮到你了。

P.P.S.: 一线音乐院校的学生们不要来我这里当杠精，没有意义。
我这答案讨论的问题并不会影响到你们。
你们能进一线音乐院校的话，教材好坏根本不会对你们有多少影响，
因为你们有全国最强的师资资源、使得你们自然不会去关心二三线音乐教育圈的死活。

# EOF","之前的回答过于草率，周末有空会改一下

如果换教材，怕是一并要换一批老师。我校某老师讲c语言，公开表示main的返回值应该是void，int是某些环境的特殊写法。然后上机的环境是devc，全体编译报错，课件上的代码都运行不起来，公开打脸。
以及其他经典言论：我们现代计算机，内存绝对够怎么写都不会爆，怎么写都不会溢出。上世纪我们没有钱，买正版Windows系统要给Microsoft送多少钱啊，所以我们应该用盗版系统。","谭老师虽然问题多多，但还不至于太匪夷所思。给你们分享一下我985 IT强校的编译原理教材，几十块一本的书里蕴藏着大量天顶星科技。
重点我都画出来了，随便一个抛出来都是能稳拿图灵奖的成果，分分钟吊打IEEE全体。


不过实事求是，这本书总体没啥问题甚至比较优秀，上面那一段大概是某些不可抗力的体现，魔幻但真实。","原来我读大学的时候就是学谭浩强版本的C语言，这么多年了还是这本啊？烂书一直用，能说明两个问题：
1. 改变要靠自己，等别人去改变是不靠谱的事情，哪怕改变难度很大；
2. 一本书籍可以养活一批人。教材、教案早已了然于胸，熟悉的内容滚瓜烂熟张口就来，哪里需要改变了？改变了还要我花时间去备课，去熟悉适应新内容，而且我自己也不一定学得会啊？那怎么去忽悠别人呢？"
现实中程序员是怎样飞快敲代码的？,哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？,"当你看到一个程序员的两只手在键盘上上下翻飞，行云流水的时候，多半不是在敲击代码，
大概率是在跟产品经理撕逼讨论需求
另一种可能就是在跟测试打口水仗
10%几率是在论坛码字摸鱼
1%几率是在跟MM聊天
可以手速飞快而不需要停下思考的代码，多半也可以靠Ctrl + C/V 搞定。
而当你看到程序员双目呆滞，遥望天际的时候，多半编程开始了
——————————————
6月7日更新
没想到随手写的段子
竟然戳中了这么多人的心。
感觉就像随手划了根火柴，
却炸翻了整座山头
既然这样，那我就多说点儿。

每逢项目之初，
我们飞速写下的每行代码，
都宛如十四行诗般简洁优雅，
每个变量都宛如慈父膝下的爱子，名正言顺
感觉每一处精心设计的逻辑，
都是一段完美的乐章，
应在维也纳的金色大厅永久传唱
每一段完美实现的逻辑代码块，
都应该镌刻在石碑上，
供后辈顶礼膜拜
就在你得意之际，更新SVN时，
一段“ int aa = 0;”莫名出现在你的代码里，
这感觉仿佛是石碑上被油漆笔歪歪扭扭喷上了“XXX到此一游，嘿嘿嘿”
一个不孝忤逆的逆子，
让你血压飙升，头发尽断
满屏的诗和远方，
瞬间成了眼前的苟且
—————————
9月29日更新
随着窗外街灯的亮起，
夜
谦卑地跪在你的面前，
奉你为此间的主人，
双手呈上久违的宁静

你其实并不喜欢加班，
但却有些享受在办公室独处的感觉。
日间的嘈杂、突如其来的会议、打断思路的问题
让你无法集中精神
反而是现在，
除了机箱风扇散热发出的轰鸣声，
和空调百叶偶尔发出的咔哒声，
周围一片，万籁俱寂。

你伸了伸懒腰，
略微活动了下手指，
戴上耳机，
颠了颠手边略沉的快乐水，
一切准备就绪。

空灵的音乐带来无比的专注，
专注的力量令你灵感迸发，
敏捷的思维仿佛是疾走的奔雷，
划破厚重的迷雾，
整段代码原本错综复杂的逻辑，
被瞬间照亮，清晰无比。
在这一刻，你是无比自信的，
思路没有丝毫的滞塞，
指尖在键盘丛中飞速游走，
轻盈弹跳，整块代码一气呵成，
逻辑完整得就像整除一样干净利落，
没有丝毫得拖沓。

用户的每一步操作、每一处错误，
都在你的意料之中，
你就像是循循善诱的牧羊人，
指引着迷途的羔羊，
重返阳光大道。
用户仿佛是你座下的子民，
按照你预定的轨迹，徐徐前进。
而你，
此时此刻，
便是此间无可争议的王。
......
一个电话突然打了进来：
“先生，您的筒骨粉到了，
给您放到楼下门卫那了，祝您用餐愉快！”
“好的，我下去拿。”
你将剩下的快乐水一饮而尽，
空易拉罐被捏成一个小蛮腰，
划过一道完美的弧线，
落入垃圾桶中。
你胡乱地踏了双人字拖，
渐渐消失在昏暗的走廊尽头，
唯有油亮的脑门和门禁的荧光绿，
在黑暗中若隐若现，遥相呼应。","我来回答一下吧，一天7.5个工作小时。
1.早上九点到公司，打开手机看会儿新闻，朋友圈。
2.开始进入工作状态，看哈需求有没坑，再构思一下怎么写会好点。
3.开始vc大法，找找以前的代码，copy一下，看一下能不能运行。如果没有，差不多就自己写，开发工具也很智能，给出提示，自动补全类。如果没搞过的，百度一下，看看别人怎么写的，能拷贝就拷贝。
4.大约10.30左右，休息一会儿，喜欢抽烟的就去抽烟，不喜欢抽烟就刷一会儿朋友圈，讨论一下中午吃什么。
5.这时候差不多11.30了，停下工作，准备吃饭了！
6.中午吃完饭肯定是要睡一下，13.30开始工作，这种状态能持续到15.00左右。
7.休息半个小时或者一个小时，聊天，抽烟，刷朋友圈。
8.差不多16.00到17.30再次进入工作状态。
9.准备下班了！
ps整个开发过程内心是这样的
傻逼客户，提的垃圾需求
傻逼项目经理，做的垃圾计划
傻逼产品经理，做的垃圾需求，看不懂
傻逼测试，不会测试，乱点
傻逼同事，写的垃圾代码
傻逼架构，搞的垃圾架构
傻逼百度，找不到查不到想要的问题
众人：傻逼开发！","直接上视频，看看现实中程序员和想象中的程序员敲代码有何不同！
00:29
已成功切换清晰度
现实中程序员是如何敲代码的

是不是发现自己生活被偷窥（手动滑稽

当然不仅仅如此：
现实中，很多程序员更熟练运用 Ctrl/Command + C 和 Ctrl/Command + V。
拿到一个需求，先搜有没有轮子，能直接用，绝对不自己写。能通过改改改就能用，绝对不自己写。
当然，如果他写的烂，我还是会嘲讽一波，然后自己写个更好的（手动傲娇

我是程序员客栈，中国领先的程序员自由工作平台，技术新人力解决方案。
我们签约经验丰富的程序员，采用线上开发、驻场工作、招聘猎头等方式，帮科技企业解决软件开发和技术用人难题，为程序员提供新式工作机会。
程序员客栈的使命是为程序员服务，当好程序员的经纪人，布道先进技术。

我的相关回答：
有哪些程序员特有的技能？
GitHub 上有哪些优秀的项目？
为什么没有或流行的拼音编程语言？
TensorFlow 如何入门，如何快速学习？","飞快敲代码？不怕秒得腱鞘炎吗？
一天也就是100-200行代码，加上IDE的各种神奇自动补全功能，能敲几次键盘？
如果我听到我的组员在飞快的敲键盘，我都不要站起来看，就知道他们在撩妹，不会干别的，一定是在撩妹。
【此处有神秘的微笑】","先上图

拿图的请自觉点赞
10点前一秒赶到公司打卡范围钉钉一下
慢悠悠挤电梯，上楼，放包，摆正电脑
下楼买个包子或煎饼或灌饼，顺便带一杯咖啡或脉动或气泡水
吃完早点10点30啦，然后抽根烟开始美好工作新一天
打开文档编辑器浏览器等乱七八糟
然后开始刷微博刷知乎刷微信刷一切
或者去论坛啊社区啊指点江山围观热点
刷到11点，看看领导状态
如果盯着我或者来姨妈，就放下手机回忆回忆昨天的进度
如果开会或者春风满面，继续刷刷刷
反正上午是不可能敲代码的
除非到了deadline
11点半到45之间开始幻想中午吃啥
11点45开始带薪拉屎腾空肚子
12点准时拉上小伙伴抢电梯
12点45或13点基本吃完饭又回到工位
趴着简单刷下消息，然后开始睡觉
睡到14点到14点30（看有没有人催）
然后倒杯水，看状态迷迷糊糊到15点或15点半
抽根烟开始正式敲代码
Start >
Branch 1 > 敲到18点，下楼吃饭，不饿就下楼散步
19点上楼继续敲代码，或者开始搞点新技术什么的
基本上没有需求就是自己玩奇奇怪怪的东西
Branch 2 > 敲到17点，周一评审会，周四研讨会，周五定审会
开会大约到18点30，然后下楼吃饭
19点多点上楼，敲代码，或者开始搞点新技术什么的
或者继续开会
End >
然后到21点看情况加班，比如上线或开会或挨批或批人
下班以后10分钟走路到家（住的比较近）
或者磨叽到10点就打车去远处朋友家彻夜撸串，或者去夜生活什么的
带薪抽烟一天大概五六次的样子，一般10-15分钟，可混时间约1小时
带薪拉屎基本上还是要分情况的，小号才是真的个人需求，大号都是混时间，正常人哪有那么多屎。。。大号20分钟起步吧，大概2次左右，连带着小号又是1个小时过去了
基本上每天就是下午那两三个小时加上晚上一个小时，这是10 9 5工作制度
10 7 5工作也差不多，只不过下午就纯敲代码，19点下班，正经工作时间差不多，但是思维比较连贯，效率稍高一点
而且因为没有晚饭时间，所以加班都很急，赶紧干完赶紧走，反正没有补贴，磨叽到10点要三个小时，实在难熬，所以基本没有打过车。。。
但是需求来了就真的急，往死里逼那种
晚上回家熬夜继续敲，周末在家自己想办法搞定，高铁飞机继续敲
紧急情况一个电话打过来，地铁上开个热点就是干
所以电脑随身带，有事没事都得背个包
有些复杂需求随便搞搞就到了23点了
但是23点打车，显示排队50位+。。。"
室友想抄我的代码，给还是不给?,"一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。
而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡
但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？","给，但是换一种方式，别微信传，也别U盘。
Github上创建一个Repository，先空着。让他Star你。当然他一个人还不够，让他想办法发动更多人去Star。
超过10 Star，你就把代码Push上去，然后让他Fork。
超过100 Star，都不用他修改变量名，服务到家，你帮他改。然后用他的Github账号Pull Request。
这个Repository留着，以后学弟学妹们都用的到。平时Private，有人找你要代码，就把他加为Collaborator。这就是Github允许私有仓库人数无限制的福利。
这么多Star不仅仅是数字，而是你毕业找工作时简历上最亮的那颗Star。记得找工作期间Make Public。
不是开玩笑，如果我是大学老师，我就要求学生这样交代码作业。这是程序员的必备技能。我会给每一个班创建一个Organization，他们交作业我都知道，代码有问题就发Issue。全专业的学生互相Follow，谁的代码写得好，大家就Star。下次上课，我可以打开Github，讲评一下比较好的代码，也可以让同学们互相学习和评价别人的代码。
大一新生入学，先学习Github的基本用法，然后一项练习就是Star学长们的Repository，为他们找工作贡献一份自己的力量，这个优良传统一届一届传承下去...
软件程序的一个根本特征就是可复制性，这是其他行业没有的特质。开放源代码也是目前软件产业发展的一个主要驱动力。应该让即将从事这个行业的新人们更早更深刻的认识到软件可复制可分享的本质特点。
关于如何最方便的浏览GitHub上的源代码，我之前专门写过文章。这里只给一个最简单最酷的办法，看这个视频：
0
浏览Github源代码
演示的是浏览LInux一个C程序代码。
只需要把http://github.com换成github.githistory.xyz就可以浏览当前源代码文件以及它的历史变更。","我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。
话说。。当年的代码写的真是烂啊。。。","当然可以给，但是建议你在代码里做点手脚。
最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。
/*
 * 作业：***
 * 作者：哆啦A梦
 * 时间：2019-6-17 11:30
 * 版权所有，盗版必究
 */

#include <iostream>

#define ___AUTHOR___IS___DORAEMON___ // 这里也是在说明作者是谁

// 再下面写程序代码就好了
对于那种稍微警觉一点的，会复查源代码的室友，会把以上注释去掉，甚至换成自己的注释，到头你反而解释不清楚了。这时候就需要将版权声明放在稍微隐蔽一点的地方。比如，使用 ASCII 码来代替纯粹的英文字符，将版权声明隐蔽到运行结果里。
#include <iostream>

int main(void) {
    // 下面这段字符串的值是 FROM: DORAEMON，就是各个字母的 ASCII 码。
    // 这句注释只是我来向大家解释这段代码是什么意思的，实际操作时千万别写
    char a[] = {70, 82, 79, 77, 58, 32, 68, 79, 82, 65, 69, 77, 79, 78, 0};
    std::cout << a << std::endl; // 打印版权信息

    // 在下面写程序代码
} // main()
这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。
但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件触发器，超过指定的时间才显示版权信息！
#include <iostream>
#include <ctime>

int main(void) {
    char a[] = {70, 82, 79, 77, 58, 32, 68, 79, 82, 65, 69, 77, 79, 78, 0};
    // 1560816000 是北京时间 2019 年 6 月 18 日 8 时的 Unix 时间戳，以下代码的作用是
    // 仅当系统时间在 2019 年 6 月 18 日 8 时之后才打印版权信息。
    if (std::time(0) > 1560816000) {
        std::cout << a << std::endl;
    } // if (std::time(0) > 1560816000)

    // 在下面写程序代码
} // main()
如此，就既不丢人情，也不怕被卷入抄袭风波了。
更新：补充 cout 和 endl 前漏写的 std 命名空间。","现有回答的答案都服务太不到位了。
岂止是要给啊，还要为了不让老师看出来，给改好了再给。

想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。
然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）
于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）
等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。
要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？

所以，要给。如果有精力还要多给几份，多改改。
这是不可多得的练习重构代码的机会。

一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？

至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。","某些高赞是想让题主死吗……
伤害室友感情级别，由低到高：
1、给他抄。
2、给他抄，但附加合理的收费。
3、不给抄，但提供帮助/思路
4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）
5、犹豫且模棱两可的拒绝。
6、用拙劣的借口拒绝。
7、拒绝并附带嘲讽（划水挂科活该，您配吗？）
8、爽快答应，但暗中使用手段，使室友被查出抄袭。

你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）
但你要是答应给他抄，然后背后捅刀子，别说这段友情必然凉凉，你的臭名甚至会传遍整个专业整个学校。大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。
做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。
那可真的是药丸了。","当年学期末邻近，编译原理大作业让写个C0或者P0编译器。我上网找了个c实现的p0编译器，花了两天看了一遍，自己用Java重写了一份，打包上传交差。注意，我的版本是运行在命令行的。
室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。
隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。
结果你猜怎么着？？

我60分，室友80分，隔壁那货95分。
所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，诚不我欺。
你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。
PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。","你放到github上，贴上一个gpl协议，告诉舍友地址。
你维护的开源项目对吧，也有你的维护记录，老师也能看得到。","想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔古井无波。。。
小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。
真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！
（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）
广告
色情片如何损伤你的大脑？
作者 柳叶锈刀
¥9.90
去查看","给。
大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。
后来我创业，室友从上海赶到北京帮我做了3个月。
我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？","我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来
时间长了，他们也就都只问我思路了
关系好的关系不好的知道我这么严肃
也就不想抄了
更新分界线
我的回答的核心就是“要自己学会，自己懂”
以下是一个栗子
我努力往好的方向带别人
难道不好么？"
你的编程能力从什么时候开始突飞猛进？,"百度多了
你就明白：它也许有用，但它封印了你精进计算机英语的机会。
Google多了
你就明白：各地大佬们的文章很Nice，但它们仅是你技术知识体系的精华补充。
开始读书了
你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。
接触到国内外大社的经典书后
你就明白：那些烂大街的21天宝典，7周速成，都是些什么玩意，误人子弟！
图灵牛逼，动物牛逼，Manning牛逼。
好书读多了
你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。
多做业务
你就明白：所学的技术该用在哪。
多做用户量大的业务
你就明白：光会用技术，和用好技术是两码子事。
多找第三方开源
你就明白：原来工作摸鱼不是梦。
太随便用第三方
你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。
第一次看完源码
你就明白：开始还是很讨厌的，等全盘搞明白了，发现“咦~有点意思”。
源码看多了
你就明白：自己的查克拉莫名的增多了。而且吐槽文档不全的习惯也渐渐少了，一个不服就跑去观摩别人的源码，顺便偷个师。
再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。
因为，但凡通过点滴付出，累积出来的结果，都是平淡无声的。
突然获得这么多支持，十分感谢大家。
知乎就是师兄的心得记事本，喜欢的可以关注哦~
「卫星｜ktshixiong，深度职业规划＋」
关于书籍的推荐，师兄挑几本常看常新的经典
一、新手进阶，可看
《重构 改善既有代码的设计》
本书的优点：篇幅短小，示例经典，讲解细致。最重要的是新手读起来不费力，可以作为长久阅读的床头书，开卷必有益。
本书的作用：帮助你学会如何写出有层次的好代码，让你在工作中赢在细节，更容易获得有实力的前辈的认可，职业发展更轻松。
二、寻求职业长久发展，可看
《人月神话》
本书的优点：偏重于讲述编程哲学，几乎无代码阅读成本，笔者像一位睿智的导师，以亦师亦友的口吻，有条有理地为你分析各种项目问题，分享各种工程与人的权衡，还有可靠的处理准则，有志于在编程事业上长久发展的朋友推荐阅读，可以少走很多弯路。
本书的作用：主要是打开你规划工程的格局，次要是积累行业谈资，一石二鸟
《UNIX环境高级编程》
本书的优点：就是全书都是优点，UNIX作为经典中的经典，它的设计理念，基础功能的实现方案，都是值得熟透于心中的，无论往后有多少新系统，最底层的东西都是大同小异。书的内容量大，适合长年小口啃。
本书的作用：打牢基本功，基本功是你技术高度的基石，永远要记住这一点。
广告
《UNIX环境高级编程》
京东
¥147.10
去购买
此外，不要局限于自己是什么IT岗，只要能帮助你积累优秀的技术思维，好资料再多也不嫌多，职业路走宽了，在IT行业，你什么时候都能走得雄赳赳气昂昂。
更多优秀技术书籍，请看师兄这篇新文章就够了
适合程序员入门与进阶，阅读目的都有说明
→ （持续更新）
相关 IT 高赞干货：
师兄总结的一波行业经验（精华版）
→
师兄多年来对编程的小感悟
→
→
师兄谈自学编程的小心得
（带过 10 来位新人入行的经验）
→
→
师兄关于职场的经验分享
→

以下为冷门，但我自己很喜欢的知识点。
师兄讲编程的难，有趣又真实得心痛
→
师兄实践了多年的自律方法论
→
师兄关于优秀书籍的分享
→
最后，
还是万分感谢大家的支持^_^。","百度多了
你就明白：它也许有用，但它封印了你精进计算机英语的机会。
Google多了
你就明白：各地大佬们的文章很Nice，但它们仅是你技术知识体系的精华补充。
开始读书了
你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。
接触到国内外大社的经典书后
你就明白：那些烂大街的21天宝典，7周速成，都是些什么玩意，误人子弟！
图灵牛逼，动物牛逼，Manning牛逼。
好书读多了
你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。
多做业务
你就明白：所学的技术该用在哪。
多做用户量大的业务
你就明白：光会用技术，和用好技术是两码子事。
多找第三方开源
你就明白：原来工作摸鱼不是梦。
太随便用第三方
你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。
第一次看完源码
你就明白：开始还是很讨厌的，等全盘搞明白了，发现“咦~有点意思”。
源码看多了
你就明白：自己的查克拉莫名的增多了。而且吐槽文档不全的习惯也渐渐少了，一个不服就跑去观摩别人的源码，顺便偷个师。
再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。
因为，但凡通过点滴付出，累积出来的结果，都是平淡无声的。
突然获得这么多支持，十分感谢大家。
知乎就是师兄的心得记事本，喜欢的可以关注哦~
「卫星｜ktshixiong，深度职业规划＋」
关于书籍的推荐，师兄挑几本常看常新的经典
一、新手进阶，可看
《重构 改善既有代码的设计》
本书的优点：篇幅短小，示例经典，讲解细致。最重要的是新手读起来不费力，可以作为长久阅读的床头书，开卷必有益。
本书的作用：帮助你学会如何写出有层次的好代码，让你在工作中赢在细节，更容易获得有实力的前辈的认可，职业发展更轻松。
二、寻求职业长久发展，可看
《人月神话》
本书的优点：偏重于讲述编程哲学，几乎无代码阅读成本，笔者像一位睿智的导师，以亦师亦友的口吻，有条有理地为你分析各种项目问题，分享各种工程与人的权衡，还有可靠的处理准则，有志于在编程事业上长久发展的朋友推荐阅读，可以少走很多弯路。
本书的作用：主要是打开你规划工程的格局，次要是积累行业谈资，一石二鸟
《UNIX环境高级编程》
本书的优点：就是全书都是优点，UNIX作为经典中的经典，它的设计理念，基础功能的实现方案，都是值得熟透于心中的，无论往后有多少新系统，最底层的东西都是大同小异。书的内容量大，适合长年小口啃。
本书的作用：打牢基本功，基本功是你技术高度的基石，永远要记住这一点。
广告
《UNIX环境高级编程》
京东
¥147.10
去购买
此外，不要局限于自己是什么IT岗，只要能帮助你积累优秀的技术思维，好资料再多也不嫌多，职业路走宽了，在IT行业，你什么时候都能走得雄赳赳气昂昂。
更多优秀技术书籍，请看师兄这篇新文章就够了
适合程序员入门与进阶，阅读目的都有说明
→ （持续更新）
相关 IT 高赞干货：
师兄总结的一波行业经验（精华版）
→
师兄多年来对编程的小感悟
→
→
师兄谈自学编程的小心得
（带过 10 来位新人入行的经验）
→
→
师兄关于职场的经验分享
→

以下为冷门，但我自己很喜欢的知识点。
师兄讲编程的难，有趣又真实得心痛
→
师兄实践了多年的自律方法论
→
师兄关于优秀书籍的分享
→
最后，
还是万分感谢大家的支持^_^。","update:
评论区很多学弟学妹要求整理一个学习路线，刚写了篇文章：
从小白到后端工程师的自学之路 - MutexLock的文章 - 知乎 https://zhuanlan.zhihu.com/p/130364187
---------------
在啃掉一本本计算机经典书籍和写下大量代码以后。
疫情原因回不去学校，作为一个马上毕业，即将入职腾讯的大四生，分享一下自己的学习历程吧。
本人在大学之前从未接触过编程，最开始的编程学习还是在高考完后，从书店买了本C Primer Plus，然后暑假开始啃，前前后后也就看了几十页。
大一上的时候，来到了华中师范大学，还没有转专业到计算机，一直在自学C语言和看一些计算机入门书籍（编码、计算机科学概论）。当时也很迷茫，不知道以后道路如何，所以也学了一些杂七杂八的东西（前端 python啥的），所幸的是，当时坚持把C Primer Plus结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。
大一下，转专业到计算机了，开始自学数据结构，算法和C++，部分看完了 数据结构与算法分析，并且把书上的数据结构实现了一遍，记得当时五月份给自己的flag是看完C++ Primer，然后每天上课看，晚饭吃完后也跑去七号楼刷书，最后囫囵吞枣似的看完了大部分。
大一暑假，txr大佬 @杏仁糖 给我说他面试通过了华科的联创团队Unique Studio，而且给我说他们团队都特别厉害，有些人在军训的时候就把C++ Primer给蹲着看完了，当时十分钦佩，幻想也能够进入贵团队。于是打算在大二上的时候，去报名他们的秋招。所以，那个暑假在学校自学，呆了五十多天。最初，拿起一本APUE，看了一章后感觉看不懂又放下了。然后，又拿起一本红色封面的算法第四版，这本书看完了，并且用C++把上面的算法都实现了一遍。另外，听知乎大佬说CSAPP是必看的神书，当时也懵懵懂懂地看了前面三章，做了lab。为了学习linux，还看了一本叫linux命令行大全的书。武汉的夏天很热，只能寂寞待在宿舍的我，打开了LeetCode的世界，写了一百多道题。
大二上，十月，忐忑迎来了联创的面试，前面两轮都过了，直到其特色的“熬夜测试”环节，因为实力不足+精力不足，测试败北，没有通过。清晨七点，在回学校的公交车上思考自己不足，总结是知识体系仍然不够完全，而且深度也不够。后来这个学期有点“误入歧途”的意思，入了Machine Learning的坑，记得当时花了好几个月刷完西瓜书和吴恩达机器学习课程的讲义（真佩服当时的毅力，都是英文和公式推导），后来想了想，ML/DL这个东西有点玄学，于是毅然决定成为一名做工程的程序员。总的来说，虽然这个学期的时间都投入到ML的学习中，没有学习工程方面的东西，只有用python写了一点好玩的爬虫，但是给了我以后坚定走工程方向的决心吧。
大二下，这个学期是打下计算机知识基础的关键时期。从知乎找了一系列书单，看完了CSAPP（做了lab，为了bomb lab还通宵了，强迫症想让自己把炸弹都拆了）、半本算法导论、effective C++、计算机网络系统方法（前三章）、部分TCP/IP详解等，做了一些项目，比如正则引擎（这个是参考了轮子哥的教程）等等，尝试写JSON库（未遂）。其实，因为学校只是一个普通211，找到好工作的学长学姐先例很少，一直是没有信心自己能去大厂，直到当时了解到myk @孟永康 学长在春招收割了一系列offer后，才有了些许信心，相信自己如果能够像他那样努力，那么也能够找到好工作（感谢myk学长那时的鼓励和指导）。所以，定下了一年把自己水平提升到能够在大三下春招的时候拿下大厂offer的目标。
大二暑假和大三上也一直为这个目标奋斗，补上了APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux多线程服务端编程、部分C++ template、部分C++ Concurrency in Action等书籍。然后，也一直没有放弃刷题，LeetCode写到了三百多道。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的协程库，阅读了一些优秀的开源项目，SGI STL、muduo、libgo、libco等。中途还对haskell产生过兴趣，打印了一本Learn Yourself Haskell For Great Good，看完后感觉坑太深，还是专注找工作吧，haskell对我一直都有很强的吸引力，但是这种也只能作为爱好吧。另外，编译器也是有这种魔力，看了部分编译原理（龙书）、部分现代编译原理（虎书）和部分Engineering a Compiler，多次尝试写自己的编译器，多次未遂（不过现在有空了，在补上之前的烂尾项目）。当年的笔记哈哈：
部分学习笔记
时间到了12月份，9号楼某个自习室内，txr大佬一直鼓励我去投简历找实习，本来我一直畏畏缩缩，对自己不太有信心，被鼓励后想着投就投吧。当时投了字节跳动和momenta的实习，面试都比较顺利，于是在大三上就在字节跳动开始了愉快的实习，比自己的计划早了大半年。当时为了准备面试，看了好多牛客网的面经，查漏补缺式地补齐自己的知识盲区。
大三下，基本都是在实习，学习了很多工程实践上的东西，接触了go的技术栈，并且对devops和软件工程方面有了认知，包括代码管理、发布流程、微服务啥的。然后实习的时候骑驴找马，找到了腾讯的暑期实习。因为这个时候没有了找工作的压力，所以开始学一些自己感兴趣的东西，包括Rust（至今水平还是不太行）、分布式系统（DDIA、MIT6.824等），零零散散学了点东西。
大三暑假，腾讯实习了两个月，开始学习kubernetes、各种中间件等实际业务用到的东西，这个时候就感觉拥有到扎实的计算机基础是最重要的东西。
最后，顺利拿到了腾讯转正和字节跳动的秋招offer，两家都给的比较高，选择了工作体验更喜欢的腾讯哈哈。
总的来说，学习计算机是需要积累的，花一两年时间啃下那些厚厚的经典书籍后，才能构建自己的知识体系，然后阅读大量优秀源码，做一些有趣的项目，编程能力就能突飞猛进啦。
现在回头来看，大学时光真是如此宝贵，这是人生中为数不多可以静心学习的一段时间，可以不用考虑任何其他事情，每天学习十多个小时。
部分藏书：","大学时浑水摸鱼，毕业后大约半年，在网络上寻找自学资料时，发现了GitHub和一些程序员论坛，自学了py，然后打开了新世界的大门。
包括购买了梯子，独自啃下两套纯英文官方文档，在GitHub上友好亲切的交流，刷题，看最新的软件工程实践书，等等
===========更新2：===========
一些人问《哈弗大学幸福课》在哪里看
我是在这里看的：https://www.bilibili.com/video/BV1Gs411o71d?p=1
其他的我不知道
=========== 更新 ============
断断续续的收到一些赞，写一些可能对大家有帮助的东西吧：
1、提高知识最好的途径是读书，包括但不限于计算机四大名著《操作系统》《计算机网络》《数据结构》《计算机组成原理》。经典书籍不仅仅有完善有效的知识，更重要的是这些书里的计算机经典思想，一直到现在都没有过时，十分的有用。
2、Github是个好网站，值得习惯性的到上面搜索需要的东西。比如awesome系列和一些质量很高的资料整理项目（整理常见的面试、刷题、常见工具链的git repo）
3、v2ex和知乎都是很好的网站（尽管审核方面被吐槽很多），论坛上有很多很厉害的大佬，关注认真答题大佬的动态对开拓知识领域是有一些帮助的。
4、善用搜索引擎（专指Google），最好能把自己最常用的工具的官方文档啃一遍。主要是习惯英文文档的表达方式+系统的认识自己所用的工具，对自己写文档也是有很多帮助的。
5、因个人有长期的抑郁经历，所以对心理方面关注得也比较多，十分推荐学习《哈弗大学幸福课》。这门课的综合内容十分丰富，实践性很强，能够有效的提高生活、职场中的软技能（沟通能力、抗压能力等）（这门课另外一个很厉害的地方在于，仅仅是上课的方式，也能提高你的逻辑思维能力，毕竟据说是哈弗学生选修最多的课，课程质量极其的高）。
6、有一个我自己打算做但实践得还不太好得地方：看经典开源项目得源码和架构。只看过一些小的玩票性质的开源项目，也学到了不少东西，大型的经典的开源项目还没能看（STL、Git等），这些项目对我来说主要是太庞大，时间上有些不够用。
7、最近在坚持做Leetcode每日一题，也推荐大家一起刷呀。保持手感，很多题看起来简单，但评论区也能看到有趣的知识。
8、关于职业规划这种事情，我以前是没有的（主要还是抑郁+低自尊影响的吧）。现在获取的信息太多太多，没有职业规划很容易被带偏。我是在做了长期的心理咨询+《哈弗大学幸福课》，工作、生活上都有一些经历了之后才慢慢想清楚自己将来的生活与工作要怎么打算。这种事情想清楚过后，做自己想做的事情目标会比较清晰，不会得过且过。

感谢阅读，祝好。","大概……是为了追女生而写了一个游戏的时候吧。
大概七年前，我为了追一个女生，以她和我为主角写了一个战棋类RPG游戏（其实还做了很多别的事情hhhhh），灵感来源于小时候玩的世嘉版《水浒传》。故事的背景是我大学，游戏名字叫做《凌工路2号》。
我一直都觉得，在大学，生产力的来源主要有两件事情：
deadline；
荷尔蒙。
这个游戏有对话系统：
有战斗系统：
有职业/升级/转职/职业相克系统：
职业/转职系统
职业相克系数表
有角色属性、物品、存档系统：
有剧情：
00:58
01:06
地图背景是我的学校
有作战系统和敌人的AI：
00:18
故事的背景是我的大学，这是中心食堂和足球场：
看到这个毛主席像有人应该会觉得很熟悉吧
我甚至还在综合楼的自动售货机上做了一个物品买卖系统：
00:28
这个游戏大概不到一万行Qt代码，没有用任何的框架和引擎，现在看来相当原始，所有的移动和动画效果都是用Qt的定时器+一堆if/else判断徒手撸出来的（当时不知道更好的办法，就这么一根筋地写了几个月）。我自己的感觉是，写代码超过5000行的时候，自己的能力会有一个飞跃——以前从没有注意过的东西开始觉得费解，从而逼迫自己思考和学习，然后进步。在我参加校招的时候，这个游戏的代码量占我当时的代码量的差不多一半……现在回想起来，我校招能进阿里，这个游戏带来的能力提升功不可没。
这个游戏没有最终完成，也从未发布，静静地在我的硬盘里躺了七年。
四年前我跟游戏设定的女主角结婚了。
这周二我无意中看到它，拿到现在的机器上重新编译通过。在吃晚饭的时候，我问她：
“你知道我当时给你写了个游戏么？“
她说：“不知道啊”。
代码在这里（我知道它很烂），遵守WhatTheFuckPublicLicense，随便修改：
最后放几个全地图的场景，如果你和我是一个学校的，会觉得相当亲切。不过，大部分的地图都不是我做的，我自己做了中心食堂、综合楼、研教楼、校医院、一馆五个场景的室内地图。
02:48
03:17
01:57
评论区炸出了很多同道中人：
@杜凯 说：
我去，天涯何处无知己啊，我做过一个类似的玩意 http://www.dklogs.net/xiaoming
@ Authur 说（at找不到这位老哥，刚刚at错一次）：
是rpg游戏。
还记得98年和曾经大学同学一起在dos下用turbo pascal写过类似的rpg游戏 红楼梦，扒的剑侠情缘的图片库（分析后发现都是去掉调色板头部的bmp图片），还自己做了地图编辑器可以编辑地图，背景音乐在dos单任务系统下是用中断来持续播放，640k内存不够用，还用到了高位内存和扩展内存，由于dos下声卡驱动问题，代码只能在寝室机器上运行，曾经学校软件大赛前把寝室电脑主机搬到网吧通宵撸代码调试，把门卫大爷还有网吧老板惊得外焦里嫩——没见过来网吧还自带主机的。后来幸不辱使命，参加大赛得了二等奖（因为学校评委说一等奖不能是游戏…）
往事历历在目，恍如昨日，但转瞬间已经二十载过去了，感叹…
如果赞能破万的话我就把可以运行的二进制版本release到GitHub上……","学了OO, 熟悉了“设计模式”, 领悟了IoC和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用if-else写进去, 这是我感觉自己能力提高的第一次飞跃;
看SICP和CTM让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;
学了函数式编程思想为我打开了另外一个世界, 引导我去了解haskell, 去稍稍的学习了些category theory(这个是真的难...), 这解放了我编程思想的另外一个纬度, 抽象能力有了质的提高(主要体现在generic programming的能力提高, 高级类型的灵活运用), 我开始有意识的去降低核心程序的""熵""(程序的可能性越多, 各种可能性的概率越均等, 熵越高), 使得程序更容易理解(熵越低信息含量越低则越容易理解), 而把系统的灵活性(比如状态, config等)隔离在核心逻辑之外(这样使得变化可以在一个地方, 比如系统setup时, 集中理解, 然后用理解的setup来很简单的推理核心逻辑在这种setup下会怎样运转), 这样就使得程序的核心复杂度更加接近于核心业务的复杂度(业务的熵是本质复杂度无法用调整程序结构的方法降低, 但是, 本质复杂度也是可以降低的, 请往下看), 但是又没有写死整个系统的灵活度; 这是第三次飞跃;
然而, 最大的飞跃是当我最终把重点从编程本身转移开来之后, 当我开始去看分布式系统算法, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维, 项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人, 甚至开始关心组内的技术文化建设;
这是因为“编程是最重要也是最不重要的事”
这是因为编程作为把思维变为实现的这个循环的最后一步(然后写好的程序会成为新的思考输入和基础，开始新的一轮迭代开发)，它和一个项目一个系统的所有其他方面都息息相关：需求获取，问题抽象，测试，监控，部署，框架运用，系统间集成，灵活性，未来拓展性，易用性，系统健壮性，多版本实验性，高层业务决策等等，这使得编程变得无比重要(所有的一切都需要编程来最终落到实地)，也毫不重要(编程被所有其他一切所约束和指导)。能够支撑这些所有上层思考的程序才是“好程序”，能够支撑所有这些思考的程序员，才是好程序员。学好/学会编程这件事是把所有需要思考的东西都弄明白都学好之后的自然结果。而把这些思考留给别人，自己只做思维和程序的翻译器(区分创造者和工具人的关键)，根本无法写出好的程序来。这也是DDD(Domain Driven Design) 的精神之一 （关于DDD的精神，参见此文的最后一段， 阿莱克西斯：在做程序员的道路上，你掌握了什么概念或技术使你感觉自我提升突飞猛进？ ）
以上引用出自自学编程需要注意什么？

我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个""局部最优解"" (随便逮着一个点都能开阔人类边界的天才除外); 眼界太窄以至于学了一点点东西就觉得自己""天下无敌""了, 是我们进步的大敌 (也是曾经是我最大的敌人);"
有哪些让你目瞪口呆的 Bug ？,"一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。

=====
2025/1/6更新：
想不到这个偏技术的回答居然收到了我在知乎最多的赞，不知道是被谁翻了牌子，有没要在这里更新一下。
我参加革命时间晚，随路信令只在教科书上读过，没有亲见。 在评论区 @墨枫梧桐BA7MQN 和 @点点， @PROZAC 老师的引导下补习了1号信令。 呃，一句话，如果中继线路有使用带内单频脉冲方式的1号信令，一个持续600毫秒的2600Hz脉冲就可以把通话掐掉。
@Music-X 老师甚至进一步推理出乐器的调式。可惜5年前买的小玩意儿早已找不到了，某宝上的购买链接又提示商品下架。不然我拿来吹一下，测一测频率是不是2600Hz, 就可以正式破案。

======
2025/1/11更新:
我找到了这玩意儿，他长这样：
网上找到了当年的谱子，这个样子
唯一的问题是，6 吹出来是2355HZ，7才是2616HZ.

要么就是我记错了断线时吹到哪里了， 要么就是2355也在2600的误差范围(也太远了点），要么就是前面的随路信令猜测不对……"
将 bug 译作「蚆蛒」，将 debug 译作「揥蚆蛒」，音译兼意译，是不是很巧妙？,"因为 bug 和 debug 已经属于 IT 领域专有名词，错误和除错这种词义宽泛的词语不足以准确描述其特指软件相关的含义，中文译名也「专有」一下未必不可行。专有名词不会污染常用语。
不全是开玩笑，一个尝试，想试试那些所谓不能翻译的英文是不是真的不可译。
至于怪诞感，为了与常用语明确区别，怪一点是有意为之。专有名词，只用于特定场景，与常用语区分是必要的。英文并不是没有同义词来指缺陷和错误，但他们故意用虫子这个词，就是为了让它成为特指的专名。
【 bug 】：
1.（especially American English：a small insect）小虫子
2.（计算机程序的）错误，故障﹐缺陷。
【 debug 】：（计算机程序的）除错。
【 蚆 】bā ：貝屬，海蚆。《正字通》：“蚆，貝屬。今雲南邊侇貨多用貝，呼爲海蚆。本草作𧵅。” 蚆、貝，一聲之轉。古時以貝殼作貨幣。（bug 即是码农的麻烦，也是码农的经济来源。）
【 蛒 】 gé：蛴螬。又名蛭蛒。金龟子的幼虫。《方言》：“蠀螬，梁益之間或謂之蛒，或謂之蛭蛒。”
【 金龟子 】：昆蟲綱，鞘翅目，金龜子總科昆蟲的通稱。已知3萬餘種，中國有1300餘種。徐珂《清稗類鈔》：“金龜子，俗稱金蟲，體長六七分，金綠色，背有甲，六足，種類甚多。有一種害稻者，其幼蟲色白，是為蠐螬，棲稻根，齧食之。及化為成蟲，仍食稻葉，旋產卵於葉鞘，農家苦之。”（农家苦之：码农苦之。）
【 揥 】dì ：捐弃，去除。（词根 de：取消、除掉、去掉）","翻译得挺好
这仨字光看着就能感受到一股腥膻咸湿的克苏鲁气息，很是能准确复现debug时的精神状态
下次别翻译了","阁下不会就是翻译出
“鲁棒性”""巴勒斯坦""""泰晤士报""""车厘子""""红地厘蛇果""""老头滚动条""“半条命”“套套逻辑”“套接字”“诱导公式”“方程式赛车”“把属性映射为属性”""双亲委派机制""""酉矩阵""""秩""""卡宾""""氮宾""""叶立德""""缺省""""渠化""""死投""
的那位姐吧。

————更新，应要求添加一下这些词的解释：
鲁棒性：robustness，robust意味健壮，强壮，应该译为健壮性，稳健性，强壮性，稳定性均可，译者不知何故要音译，由于词汇太过古早，也可能是译者当时不懂这个词的含义，总之结果导致其在国内教材中广泛使用，造成了大量学生的迷惑。
诱导公式：原文是reduction formula，即简化公式，译者翻译的时候可能用的是盗版书，国内标注的是induction formula，也可能是记错了单词的意思，因为其把reduction（减少）当作induction（归纳）来翻译，但最终的译文甚至没有体现出induction的意思，也就是说经过了两次错译才最终变成了“诱导公式”这个不明所以的名字，并且被我国高中教材广泛使用，以及各种教辅，培训班强行解释“诱导”的意思，导致越传越广。
半条命：应为半衰期。
老头滚动条：应为上古卷轴。
车厘子：cherry就是樱桃，译者非要音译出另一个物种来。
红地厘蛇果：delicious apple就是苹果，译者非要把delicious音译为地厘蛇，再加上红字，听起来像是“红地”这个地方的物种“厘蛇果”。
泰晤士报：原文是“The Times”。并没有“泰晤士（Thames）”这个发音，不仅丢失原义，还让人对该报纸的发行地产生误解。
巴勒斯坦：应为巴勒斯丁，见答主“知乎用户ObE5mQ”的回答：
套套逻辑：tautology，原义“同义反复”，纯音译导致的怪异翻译。
套接字：Socket，原义插座，接口。
方程式赛车：见用户“西瓜回路遮断器”的评论：formula使用了错误的意义。
把属性映射为属性：把property映射为attribute，译者（可能是机器）翻译时没有考虑其意义。
双亲委派机制：parent delegation，应为父类代理，当然，对于某些用户，非要译作母类代理我也没有意见，译为“双”会让人误解程序的继承关系。
酉矩阵，秩：Unitary Matrix，Unitary即单一的，被译作“酉”，中文意义看起来像是指十，鸡，很多，或者两年半。rank即排，列，被译作“秩”。
卡宾，氮宾，叶立德：见知乎用户SZnCu的回答：
缺省：默认值，原文default，不知道为什么要翻译出“缺省”，同时失去了缺少，默认两个意思。
渠化：见用户庆晓筱的回答：
死投：
Dead Drop，标准译法：固定情报投放点。见用户黄金大亨的回答

蚆蛒：原文bug，译作“蚆蛒”，一晃眼还以为是浏览器没安装UTF-8出乱码了。","我觉得不巧妙。
因为你这样文字太多了，文字笔画太多就不好写了。
可以简化一下。
例如bug，音是：八各。
为了简化，可以把“各”简化成为“𠂊”，八字没必要简化了，就两笔。
为了区分汉子和翻译，咱们可以把这部分文字增加角标。
最终成品：bug→バグ",挺不错的，一眼就有种字符集出错的感觉,我见过把【bug】翻译成【幺蛾子】的，比你这靠谱多了
被公司卸磨杀驴能把代码删除吗？,"驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。
但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。","删除代码违法，但删除代码的注释不违法。
删除代码违法，但使用奇怪的函数名不违法。
删除代码违法，但调用乱七八糟的库不违法。
删除代码违法，但加入无用的代码不违法。","想反抗又不敢反抗的时候
可以试着加倍努力干烂活，撸起袖子加油干.....烂活
态度一定要端正，水平一定要稀烂
——
我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示
他敢10点给我打电话，我就凌晨1点给他回","删除代码你什么也得不到，除了泄愤外屁用没有
不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构

注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度
活用变量闭包，闭包内外变量名称尽可能用一样的，这样整个代码就会看起来逻辑极其混乱难以分析，配合注释下毒就算尤雨溪来了都得琢磨半天
大量使用语法糖和各种简略写法，比如六七个箭头函数裹在一行里
高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山
内存能不回收就不回收了，等着它内存泄漏
不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了
把关键逻辑写成一个开源库再引用的办法，引用版本号一定要写latest，离职后自己把开源库release一个会炸的新版本，等下次依赖自动升级就直接全炸

总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人
好吧，我还是年轻了，没想到我还能遇到更离谱的哈基神
印度外包公司的代码不但几乎完全实现了上面的部分（除了开源库他们写死了旧版本并且在cmakefiles里面下毒增加迁移难度）
同时还实现了更多的屎山
所有能复用的代码都是复制粘贴的，一个项目两套UI每套UI都有对应的一套重复的代码
注释里全tm是疑问句，以至于我怀疑这群哈基神的精神状态
全局变量左飞一个右飞一个
没有单行长度限制，不开自动换行能把带鱼屏撑出去
修bug全靠加三元运算符，一行里面四五个三元运算符
在尽可能符合给出的要求规范的情况下尽可能的用了各种不安全的设计，明文传密码，本地起服务器和webview通信还留了个远程任意执行的大雷
没有处理任何race condition但到处都是多线程，会产生114514种不同且无法复现的问题
我有时候都怀疑咖喱的原料里面是不是有见手青","卧槽，你们都要埋雷给公司造成损失吗？
我当年正常写就行。","某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。
真是……太高看我了，写完不到一个月我基本就忘光了"
有哪些顶级水平的中国程序员？,希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）,"ACM世界冠军陆靖，现就职阿里云，为人十分低调，公司内号称“人肉逻辑机”，他做事不轻易动手，深思熟虑后开干，一气呵成，鲜有编译错误。遇到搞不定的代码找他时，他就看代码，不调试，一遍一遍看代码，然后指出某行代码有错误。我们都觉得他看代码的时候大脑其实就是多核CPU，在一次又一次的运行代码。某次代码遇到bug,良久无策和另外一个同事打电话问他，他在电话里说你们检查下某个cpp文件的780行左右，是否参数传递有问题，一查果不其然，问他是否在电脑边，他说不在，在肯德基吃饭，众人大惊之下去git blame,发现这代码他8个月前提交过。特别聪明的本身少见，特别聪明而且记忆力超强的更是凤毛麟角。
他有一个爱好是看日本动画片，为此自学日语，最后能和日本人正常沟通，参与字幕组做翻译。
好多人留言问他的情况，这里统一补充答复，他是我见过的最纯粹自由的人，对钱，对名誉毫无兴趣，对别人怎么看他也不在乎，只对挑战性的问题有浓厚的兴趣和异于常人的专注。","在鹅厂职级调整前，做到T5（科学家）的程序员，水平和履历都很能打。比如下面这位大佬：
吴石曾经是全球提交漏洞数量最多的个人。
他曾独自发掘超过100个Safari的CVE漏洞（“Common Vulnerabilities & Exposures”，公共漏洞和暴露）。
他曾创造过单月申报微软漏洞数量全球占比10%、独自发掘15个iOS漏洞的惊人成绩——这个数字比同期苹果自家研究人员发现漏洞（6个）的两倍还要多。
他曾发现只要给对方的QQ发送一条消息，就能够得到对方电脑的权限，进而控制对方的电脑，这对于受众巨大的QQ而言无疑是颗不定时炸弹，从此推动腾讯安全应急响应中心（TSRC）的成立。
据说初二之前吴石的数学非常差。但后来遇到良师启蒙，他对数学的兴趣一发不可收拾。高二拿了全国数学竞赛一等奖，后来考入了复旦大学数学系。
上了名校的吴石也和在座各位一样打游戏，但不是帝国时代和红警2，而是叫做“MUD”。但人家玩着玩着就黑进了游戏的服务器，并且成功修改了自己的游戏数据，从此走上了走漏洞之路。
你玩王者只想着喷队友，别人玩游戏自己开挂，这就是差距啊同学们。
*MUD（Multiple User Domain），一款上古时代的多用户虚拟空间游戏
整个大三吴石几乎都在搞计算机，他去软件公司打工，以至于几乎没有上一节课，但就是这样人家也就挂了一科。
一次偶然的机会，吴石向微软提交了可以实现系统提权的高质量漏洞，出乎他意料的是微软居然提供了奖励——要知道在当时的环境下，国内很少有公司能做到这么体面的事情。
受宠若惊的大神一发不可收拾，没多久又提交了数十个漏洞，这甚至超过了微软自家安全团队，2007年他收到了来自微软的offer。
再到后来，漏洞大牛的简历愈发丰满：
在加入KEEN Team后，吴石和队友们用两种不同的姿势搞定了 Safari，拿到了数万美金的奖金。第二年全世界的黑客用类似方法掀起了挖掘 IE 漏洞的狂潮。
2013年，腾讯抛出橄榄枝，吴石成为科恩实验室的首席科学家。2016年他带领科恩实验室团队和腾讯电脑管家组成的联合战队 Sniper 一举拿下了 Edge、Safari、Chrome，总分38分，以超越第二名13分之多的优势摘得了“世界破解大师”，比赛中所有的破解中都至少有一个吴石系统跑出来的漏洞。
当然现在更为人所知的，是他和他带领的科恩实验室团队对特斯拉的多次破解。
参考链接：
腾讯科恩实验室吴石，站在 0 和 1 之间的人

没想到这个问题这么多人关注，有兴趣了解鹅厂程序员的小伙伴，可以再看看这两篇：","尤雨溪
在美国留学时，曾经用两天时间，就复制出一款H5的Clear软件，在APP Store上线一天，就取得了付费版和总版第二的成绩。
2014年2月，尤雨溪开发了一个前端库，就是我们熟悉的Vue.js。Vue发布后，受到很多前端程序员的喜爱，很大程度上提高了前端程序员的开发效率。
后来尤雨溪希望自己能够将所有精力都放在Vue.js上，希望全职去开发和维护，在patreon上进行众筹，最终众筹的效果也是让他非常满意，每月能收到一万美元的赞助。
为了大力推广Vue，他经常出现在JS的各种交流会上，给广大开发者分享Vue的开发经历，使用Vue开发的方法和技巧。
在他的带领下，Vue.js正在茁壮成长，国内很多大小公司都在使用Vue，相信你也一定使用过这款前端的开源框架。
尤雨溪全职做Vue后，已经赚取人民币上千万了，真是非常厉害的程序员，值得我们大家学习。
这就让我们不得不深思，同样是程序员，人家怎么这么厉害呢？
蔡景现
蔡景现被称为阿里的扫地僧---“多隆”，是阿里巴巴初创时加入的三名工程师之一，也是阿里巴巴新增的三位合伙人之一。非科班出身的他，在一个月内从零开始搭建出了现在的淘宝，为了解决项目问题，常常在半夜爬起，去排除故障、去解决问题，独自维护淘宝搜索引擎5年，被称之为“码神”。
他精通C/C++/Java，从前端到后端，在从技术底层和高层业务之间来回切换，阿里的CTO对他做出过很高的评价，一个人能够顶得上一个团队。比如，写一个文件系统，别人做可能是一个项目组或一个公司，而他在很短时间内就能从0到1一个人做出来。
在所有工程师的眼中，他是一个神，甚至在公司内网的便签上，他也被称之为神。他很有钻研精神，很喜欢写代码，很傻很天真，写代码可以写到出神入化的状态。
我们应该像蔡景现一样，要有钻研精神，多写代码，多做项目，多学习；编程只是一个技术活，多做练习便能熟能生巧，将来也会成为一名出色的技术专家。
陈皓
陈皓被大众称之为“皓哥/耗子哥”，他在博客上写出了很多经典文章，推荐大家可以去看看，他的博客：http://coolshell.cn。
他从事软件已经17年多了，对底层技术架构早已了如指掌，曾就职于亚马逊、汤森路透等，目前正在进行创业。
阮一峰
阮一峰是一名经济学博士研究生，依靠对技术的执著和热情，不断学习钻研，成为了一名IT专家。他热爱技术、热爱写作、也热衷于开源。
他是经济学里写博客最好的，写博客将IT技术写得最通俗易懂的。前端的同学对他应该不陌生，估计很多学前端的同学都是跟着他的博客学习的，他的文章随处可见。
他翻译的著作有：
《黑客与画家：硅谷创业之你Paul Graham文集》
《软件随想录：程序员部落酋长Joel谈软件》
《异常流行幻象与群众疯狂&困惑之惑》等。
章亦春
大家都称他为“春哥”，他曾经就职于中国雅虎、淘宝、Cloudflare等。他的编程之旅开始于抄书，他很喜欢向大家推荐他的抄书学习编程之法，毕竟他可是从抄书到开源之巅的。
现在的春哥已经全身心投入到OpenResty中，希望OpenResty未来能在工业界、互联网等行业掀起大风大浪，引领机器编程革命。
如果有小伙伴想知道春哥是如何通过抄书学编程的，可以去图灵社区看看春哥的专访，里面记录了春哥的成长心路历程。
陆靖
他曾经是ACM的冠军，现就职于阿里巴巴，在公司内部被称为“人肉逻辑机”。他为人十分低调，做事情深思熟虑，做人十分低调，做事不轻易动手。
当有搞不定的代码时，他不是调试代码，而是逐行逐行的看代码，然后将某一行的代码错误指正出来。我估计他在看代码的时候，大脑就已经在运行每行代码了，大脑就是他的多核CPU。
之前网上流传着他的一个传奇故事：某次代码遇到Bug，他的同事无法搞定，打电话向他求助，他在电话中直接指出某个CPP下第780行的代码，这里估计有传参问题，他的同事一查，果然是这里出现了问题，问他是否在电脑旁，他说他正在外面吃饭，这让他的同事很是惊讶。
田春
他号称中国Lisp第一人，人称伞哥，他的思维远比技术值得关注。曾就职于网易云，在业内声誉很高，他的成绩我就不过多的介绍了。
有情趣的同学可以去看看伞哥的日记，地址：https://dirtysalt.github.io/html/binghe-blogs-notes.html
他的性格古怪，他坐在丁磊办公室的旁边，经常跑到丁磊办公室，将丁磊正在充电的手机拔掉，给自己的手机充电。
因为性格的古怪，后来被丁磊给开除掉了。离职时在博客上写：CEO 丁磊先生跟我性格不合，难以共事，但因为我工作成绩突出，无法直接开除，而我又深深留恋这家公司，不肯主动辞职，于是不得已将我劝退，给予 N+1 补偿，并言辞恳切地请我走人。所谓 “好聚好散”，我不得不接受。
伞哥走的时候说，他不会怀恋网易的，只会怀恋战友，等他下次回网易的时候，就是收购网易的时候。
Gray Wang
根据 FTX 和 alameda 的股权价值，2022 年 4 月 ， 在福布斯新一期的富豪榜上， 年仅 28 岁的 Gary 以 59 亿美元的身价成为了 30 岁以下最富有的人。
作为最神秘的亿万富翁高管，Gary 平时性格神秘，很少公开露面，网上照片屈指可数，连公司同事都经常很长一段时间见不到他，甚至领英的照片也只有一个背影。
Gary 出生在中国，8岁后就随父母移民美国新泽西，他从小学习成绩出色，尤其在数学和编程方面展示出了很高的天赋和兴趣。
2010 年他参加高中数学竞赛，刚好结识了 SBF 和 Trabucco （FTX的另外一名高管），三人共同参加麻省理工学院（MIT）举办的数学夏令营培训，三人皆顺利进入麻省理工学院的数学专业，Trabucco 和 Gary 攻读数学和计算机学士学位， SBF 则攻读物理学学士学位。
SBF 和 Gary 在大学中逐渐建立信任，他们做了三年室友，学习之余，他们常一起打游戏，做谜题。在空闲时间里，还会共同参加 Epsilon Theta 的兄弟会。Gary 性格沉默内敛，很多人都觉得 Gary 难以沟通、不好相处，但 SBF 在多年的观察中，深谙 Gary 的性格和能力，尤其知道 Gary 在编程和数学方面的天赋性（Gary 曾获得过 MIT 编程竞赛的冠军）。
“很多人觉得 Gary 无法相处，就和 Gary 保持距离，但我不会，我认为 Gary不想刻意远离这个世界，他非常聪明，而且他可以腾出时间去思考一些很困难的问题。”SBF 这样回忆道。
他们多年的求学经历结下了深厚的同窗友谊，毕业后 SBF 去了华尔街的交易基金 Jane Street 做交易工作，Gary 去谷歌做机票价格的整合引擎 Google flights 的开发。
2017 年 11 月， SBF 在旧金山创立了量化交易公司 Alameda research ，专注于加密货币市场的量化交易。 第一时间里，SBF 就想到在谷歌工作的 Gary，他立刻飞去波士顿，说服 Gary 加入 Alameda ：“你的天赋来做交易一定能行，加密货币市场充斥着无数的新机会，我们一起创造！” SBF 为 Gary 生动地描述着他的雄心壮志与抱负。
Gary 认为在谷歌的工作确实感受不到挑战，于是接受了 SBF 邀请来到旧金山。
他们经常并肩战斗，Gary 没日没夜的编写代码， SBF 经常睡在公司，两人每天只睡 4-5 个小时。
一开始，SBF 用自有资金运作 Alameda，买卖主流币和山寨币，但业绩不佳，甚至每天的损失高达 50 万美元。
但在 Gary 加入 Alameda 之后，团队在很长时间的摸索之后，确定交易策略为利用日本、美国和韩国之间的比特币差价套利。在最关键的一环中，Gary 为 Alameda 写了整个量化程序，用于快速在不同的交易市场中套利，这套程序只要捕捉到交易所之间的价差并迅速执行，就能完成一笔无风险套利操作。凭借着这个手段，SBF 更是从投资人那里拿到了 1.7 亿美元的融资，Alameda 一天的交易量一度超过数十亿美元，每天收入可以做到惊人的 2500 万美元。
然而这并不是一切的开始，早在 2018 年， SBF 就请求 Gary 写过一个比特币交易所的程序，Gary 一个月就完成了一个交易所 CryptonBTC。虽然后来没有做成产品，但 SBF 深知如果让 Gary 来写合约交易所程序，他一个月内也可以完成，并且比市场上任何的交易所写出来的质量都要好。Gary 是一个不折不扣的程序天才。
但当时合约交易所普遍存在的问题是，当客户的头寸经历损失，并且需要追加保证金，交易所会先请客户追加保证金，如果市场变化太快，交易所就会先承担资金的这部分损失。
在后来的合约交易所的代码中，Gary 发明了一个新的清算引擎机制，可以按秒为单位来监控客户头寸，当客户保证金不够的情况下，立刻执行清算，从而保护了交易所的资金。虽然这个功能让交易者感到厌烦，但是解决了长期困扰众多交易所的关键问题。Gary 为 FTX 加入清算机制后，Binance、Kraken 和其他交易所也跟进开发了这个功能。
此外，在一般的合约交易中，用户需要有对应资产的抵押进行借贷， 缺少资金的灵活性。针对这一点，Gary 为FTX开发了“交叉保证金”功能，让用户可以用多种数字资产共同为一笔交易做抵押。这一功能也在后来被其他合约交易所相继推出。
实际上，作为 SBF 成就大业的“二把手”，Gary 不仅仅只是一个优秀的程序员，他还是一个顶级的产品经理！Gary 甚至可以单独通过市场需求开发出领先竞争对手的产品。 Nishad Singh 是 FTX 的工程主管，但是更多做工程师的协调，最核心的产品经常是 Gary 一人独自开发。
与此同时，Gary 会负责 SBF 一些特殊程序的核心请求，并且只有 Gary 和 SBF 有权限使用和查看，FTX 的工程团队甚至都不知道 Gary 写的全部的程序。其中就包括 Alameda 可以从 FTX 转移资产的 “允许负余额”这一功能，这一程序让 Alameda 可以无限制地使用 FTX 客户的资金。
在 SBF 和 Gary 的领导下，FTX 做到全球交易量排名第二，市值高达 320 亿美元。 却在 2022 年 11 月，FTX 一个星期轰然倒塌，欠下超过 100 万名的债权人的超百亿美元的债务，堪称虚拟货币世界的雷曼时刻。
FTX 的核心团队全部住在一栋巴哈马的顶层公寓中， 事发时刻警察上门扣押了包括 Gary 以内所有 FTX 的核心人员。
他在 2022 年 12 月承认了包括电汇欺诈、商品欺诈和证券欺诈等所有罪行，即将面临 50 年的监禁。目前，Gary 正在寻求在法庭上合作作证以减轻判罚。
一代天才程序员 Gary Wang 也曾名噪一时，但这样锋利的一把嗜血宝刀却被用在了错误的地方，落得一个潦草收尾的结局。
贾扬清
Caffe框架的创始人，也是TensorFlow的作者之一，曾就职于Google Brain、Facebook等。"
有哪些让你目瞪口呆的 Bug ？,"我老婆为了看一部电视剧，买了一个月优酷会员，结果一个月到期了，会员还能用，刚开始以为是自动续费，于是我帮她关了，结果第三月还能用会员，明明帐号也没绑定支付宝或微信，就是后台有扣费信息，但说的都是扣零元。
当时我们百思不得其解，以为是遇到了优酷的BUG，结果半年之后才发现，优酷竟然直接扣的话费，每个月二十，一直扣了半年，需要自己登陆移动营业厅才能解绑！
PS:建议以前买过优酷会员的人查一下自己的手机扣费情况，我之前在网上搜了一下，有不少人遇到同样的事情，而且还不知道怎么解绑，只能被优酷一直这么偷钱。
被人举报了，优酷二姥姥的贞洁可以保住了。","关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。

=====
2025/1/6更新：
想不到这个偏技术的回答居然收到了我在知乎最多的赞，不知道是被谁翻了牌子，有没要在这里更新一下。
我参加革命时间晚，随路信令只在教科书上读过，没有亲见。 在评论区 @墨枫梧桐BA7MQN 和 @点点， @PROZAC 老师的引导下补习了1号信令。 呃，一句话，如果中继线路有使用带内单频脉冲方式的1号信令，一个持续600毫秒的2600Hz脉冲就可以把通话掐掉。
@Music-X 老师甚至进一步推理出乐器的调式。可惜5年前买的小玩意儿早已找不到了，某宝上的购买链接又提示商品下架。不然我拿来吹一下，测一测频率是不是2600Hz, 就可以正式破案。

======
2025/1/11更新:
我找到了这玩意儿，他长这样：
网上找到了当年的谱子，这个样子
唯一的问题是，6 吹出来是2355HZ，7才是2616HZ.

要么就是我记错了断线时吹到哪里了， 要么就是2355也在2600的误差范围(也太远了点），要么就是前面的随路信令猜测不对……"
有哪些让你目瞪口呆的 Bug ？,"我在一家烧烤店发现过一个难以置信的大BUG。
夏天晚上和伙伴们吃烧烤，这家店位置很偏，开车去要40分钟，但是生意非常火爆，相比之下他旁边也有一家店，就很冷清。

我们也是慕名而来，但是连着两次，我发现他们的点单系统非常混乱，比方说点了十个菜，其中一个是五串烤鱼豆腐，上菜之后已经吃完了，过会儿一个服务员又端着鱼豆腐来了，说你们这儿的鱼豆腐还没上呢吧？放下就走了……
结账的时候，看见账单上只有5串鱼豆腐的钱。我们一起吃饭的几个伙伴说，肯定是因为这家店最近生意太好了人手不够，服务员和后厨都乱掉了，哈哈哈哈下次还来这儿吃。
后来中午休息时我跟一个老师闲聊，说你知不知道那家烧烤店，点餐系统超级混乱……
结果话还没说完，那个老师就跟我说：对！他们服务员经常上错菜，每次我去吃他们不是给我上两次烤面筋就是给我重复端烤油麦，还有一次我们喝了五瓶啤酒，他们居然只数了三个瓶子！！幸亏他们家人多，每次我们都能少淘点儿钱！真不知道这家店这么混乱，一天要赔多少钱！！！
听完之后，我哑然失笑。
原来这家店不是因为人太多、服务员忙不过来了才出现了Bug；而是因为有了这个“Bug”，店里的人才有这么多的啊！！
后来我寻思，在家吃烧烤也行呀：
————————
P.S. 各位看官请移步评论区，你们脑洞厉害，我给跪了","关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。

=====
2025/1/6更新：
想不到这个偏技术的回答居然收到了我在知乎最多的赞，不知道是被谁翻了牌子，有没要在这里更新一下。
我参加革命时间晚，随路信令只在教科书上读过，没有亲见。 在评论区 @墨枫梧桐BA7MQN 和 @点点， @PROZAC 老师的引导下补习了1号信令。 呃，一句话，如果中继线路有使用带内单频脉冲方式的1号信令，一个持续600毫秒的2600Hz脉冲就可以把通话掐掉。
@Music-X 老师甚至进一步推理出乐器的调式。可惜5年前买的小玩意儿早已找不到了，某宝上的购买链接又提示商品下架。不然我拿来吹一下，测一测频率是不是2600Hz, 就可以正式破案。

======
2025/1/11更新:
我找到了这玩意儿，他长这样：
网上找到了当年的谱子，这个样子
唯一的问题是，6 吹出来是2355HZ，7才是2616HZ.

要么就是我记错了断线时吹到哪里了， 要么就是2355也在2600的误差范围(也太远了点），要么就是前面的随路信令猜测不对……"
Bug是如何产生的？,最好可以通俗的解释一下！,"项目：学校里的一次月考。
程序：确保学生规范答题并交卷，返回学生的分数。
教务处开始提需求：要考语文和数学，高一高二高三分开来考，根据教材出题……
考务处开始写程序：要出这些题目，给学生分配考号，派监考老师防作弊……
普通用户行为：填写自己的唯一标识符(考号)，然后答题，交卷(上传)……
爬虫：张三一天之内补考了1024次，把题库记的一清二楚。
身份验证漏洞：李四填了王五的考号替考。
DDos攻击：王六克隆了王七、王八、王九……王一〇二四把考场挤的水泄不通。
注入攻击：小明在“姓名: ______”处填了“小明　成绩: 100”，获得了满分。
兼容问题：选择题只能用2B铅笔涂，老王用中性笔涂卡结果无法识别。
社工攻击：小明请校长喝酒，要到了试卷原题。
网络丢包：老师收卷时滑倒，试卷飞出去找不到了
性能问题：老师需要3天的时间改试卷，这3天响应速度很慢。
木马攻击：小红帮助老师改卷，实则悄悄把自己的成绩改成了100。
逻辑bug：“春眠不觉晓，_____。”既可以填“处处闻啼鸟”，也可以填“处处闻啼鸟。夜来风雨声，花落知多少”。
热更新：教务主任走进考场，告诉同学们“春眠不觉晓”后面只能写五个汉字，否则不给分。
抛出异常：改卷时发现学生字迹太丑无法识别。
异常捕获：规定看不清的字迹返回0分。","领导：修个房子。
程序员：好的，马上开始打地基！
领导：你看那隔壁那木房子就没有打地基，不要在小事上浪费时间，一个月水平面上面什么都看不到，你kpi不要了？
这是敏捷开发。


一层房子修好。
领导：我觉得两层楼的视野好，再加一层。
程序员：可是我们没有地基，重新打地基要时间……
领导：你一楼都修好了，照着再修个一模一样二楼很难？还要很多时间？
这是高速版本迭代。

二楼修好。
领导：天天走路累死了，你再修个电梯。
程序员：可是……
领导：没什么可是的，地基不稳？就在房子边上搭个电梯就行了嘛，不稳拿根木棍撑一下，这都不懂？
这是版本优化。


电梯修好。
领导：我觉得顶楼再加个游泳池就好了。
程序员：这个结构行业翘楚的房子也不支持呀！
领导：那不正显得我们牛逼么？修快点，夏天要来了。
这是快速功能追加。



游泳池修好，看着摇摇欲坠的房子，程序员跑路了，领导找来新人继续。
领导：我觉得游泳池水不够满，你加点的，一楼光线不好你在墙上打个窗户。
新人：好的，没问题领导，马上加一桶水，马上砸墙
这是打补丁。

房子塌了，电梯倒了，游泳池垮了……
领导：真是个废物，就让他加桶水，居然能把房子弄倒了，你说这是多没用？
新人：我真的就加了桶水，我怎么知道为什么。
这是软件莫名崩溃。","老婆给当程序员的老公打电话：“下班顺路买一斤包子带回来，如果看到卖西瓜的，就买一个。”
当晚，程序员老公手捧一个包子进了家门……
老婆怒道：“你怎么就买了一个包子？！”
老公答曰：“因为看到了卖西瓜的。","bug产生于人力有时穷。
知乎上看到的段子，但我不记得是在哪个答案了。。侵删：
一万个测试工程师在酒吧门外呼啸而过
一个测试工程师走进一家酒吧，什么也没要
一个测试工程师走进一家酒吧，要了一杯啤酒
一个测试工程师走进一家酒吧，要了一杯咖啡
一个测试工程师走进一家酒吧，要了0.7杯啤酒
一个测试工程师走进一家酒吧，要了NaN杯Null
一个测试工程师走进一家酒吧，要了2^32杯啤酒
一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷
一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@
一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱
1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶
一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来
一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿

测试工程师们满意地离开了酒吧。
然后一名顾客点了一份炒饭，酒吧炸了。。","我以前玩过一款游戏，叫做永恒之塔。
里面有个巨大的BUG.
在新手村打怪，一只怪最多掉5块钱。组队平分，每人1块。
但组队可以组满6个人。
于是当你组满6个人打一只怪的时候，这5块钱就不够分了。因为1是货币的最小单位。于是惊悚的事情就出现了。系统开始每人几十万，几百万的分。这个BUG就是个逻辑错误。
最后，因为刷钱被封号了。","请出一组有点久远的图片。
---------
客户是这样描述需求的
项目经理是这样理解的
设计出来是这样的
开发出来的是这样的
测试的时候是这样的
顾问是这样形容的
实施是这样的
顾客得到的是这个样子的
顾客真正想要的是这个样子的","飞机上，乌鸦对乘务员说：给爷来杯水！
猪听后也学道：给爷也来杯水！
生气的乘务员把猪和乌鸦扔出机舱。
乌鸦笑着对猪说：傻了吧？爷会飞！
（出现BUG）这时，猪伸出翅膀扑哧扑哧问道：你说什么？
（修改BUG后）乘务员发现自己莫名其妙在飞机外飞，同时还给乌鸦和猪两杯水，而且三个飞得比飞机还快......",哪有什么bug，都是规则内的可行解。,"系统已上线,一切正常!","理发师：我给这个村里所有不给自己理发的人理发。
bug：理发师给不给自己理发？
补丁：给村里所有不给自己理发的人(不含理发师自己理发。)
测试：七大姑八大姨都来理发试试
用户：给我的牛理个发。"
有哪些让你目瞪口呆的 Bug ？,"唉=͟͟͞͞(꒪ᗜ꒪‧̣̥̇)一天破万赞？！
知乎的盆友萌这么强的吗？
好像按照知乎的传统艺能，破万要说点啥 ，小萌新也跟着入乡随俗吧。
首先就是要说明下由于本人脑回路清奇的原因，所以才有的这套骚操作，为了世界的爱与和平，好孩子可不要模仿哦(｡･ω･｡)ﾉ♡
其次就是店名我不会公开啦，我也不是在打广告(´ε｀；)公开店名这条回答就变质了，窝要做个纯粹的人。
最后就是评论区说的安全问题，我承认我确实没想过那么多 ，感谢大家的提醒，下次出门我会注意的，也希望大家不要因为贪小便宜而忽略了自身安全问题。
最后的最后还是要这里云感谢一下店铺老板(*°∀°)=3，让我多苟活了几个月。
（啊对了，刚才忘说了，我才发现这条回答说的是程序上的bug问题((유∀유|||))而不是生活中的bug，我答跑题了感谢阅卷老师没扣我分！）

———————以下是原回答咯———————

这个bug是我目前见过最离谱的bug……
颠覆了我二十多年的世界观，天上掉馅饼这种好事第一次砸我身上（雾），至今我都没想明白其中的原理。
情况是这样的，去年我出门去外地有些事情要处理。由于要呆很长时间，所以就找了个地方长期安定了下来。
衣住行解决了，接下来就是吃饭方面的事了，所以我就打开“e了么”定位到住的地方，看看附近都有啥好吃的。
然后很快就有一家店吸引了我。
一看就很好吃有木有！
咳咳，其实更主要得原因是这个满21减20吸引了我 。
按照他的算法算下来，一顿只要一块钱？！
然而显然老板肯定不会留下这种显而易见的bug，因此店里所有配送食品的价格最低也要36.98块钱。
不过36.98-20=16.98，17块钱吃一顿牛排饭好像也挺合适的，所以我随手关注了一下店铺就准备下单了。
然后有意思的事情就发生了：
1.他家店铺好像关注之后每日登录“e了么”后可以领取一个21块钱红包。
2.店铺有满21减20的优惠。
3.当时花呗有消费红包减免2.88。
然后我点了一份牛排，一份炸鸡串，一共41，算上餐盒和配送费将近44块钱。
确定没有其它的了，我点开了付款界面。
习惯性点开优惠券界面，然后我看到了……
一排20元优惠券！！！
我：？？？
说是一排优惠券，其实也就三四张满21减20的。其中除了那一张签到给的一张店铺领的以外，剩下那些哪里来的我也不清楚。
难道我遇到bug了？
天上掉馅饼？
不过当时也没想那么多，只是有些意外。
确认优惠券，满21减20，原本44块钱瞬间减免到23.98块钱。
然后我看了一眼剩下的几张，顺势点了一下……
然后只见那23.98瞬间变成了个位数：2.98。
=͟͟͞͞(꒪ᗜ꒪‧̣̥̇)？？？？？！！！！！
啊这……
研究了一番，原来店铺红包和签到红包兼容，一个20一个21减免直接砍掉了40块钱。
令人智熄。
刚才也说了，那一阵子有花呗活动，消费减免2.88。
所以在花呗的助攻下，我的午餐成功从2.98减免到了0.1元钱。

0.1元！！！！！
然而你以为这就结束了？
不，这才刚刚开始！
众所周知，在各种交易平台上，老板为了自家评价界面好看，会有好评红包。
我点餐的这家也不例外。
不一会牛排饭到了，我原本对这份一毛钱的牛排饭并没有什么期待。结果送到我手里的时候……
真香！
（放一张美味牛排饭图片。）
物美价廉，这个好评老板值得拥有！
洋洋洒洒几百字给店铺一顿夸，随后上传了一张图片便发表了。
发表后刚想把手机收起来的时候，突然又想起来会不会有好评返现啊？所以我加了老板微信，发送截图申请返现。
过了两分钟，老板给我发了一块钱好评红包……
要素察觉！
也就是说，这一顿饭我不但没有花钱，反而还赚了将近一块钱？！
于是我开始怀疑人生，这怎么可能呢，店家和e了么两层纠错机制怎么可能会有这种bug，一定是今天运气好才这样，明天再看看吧。
然后第二天……
我……
又赚了一块钱……
然后在19年，史无前例的事情出现了：
我在这几个月……
靠吃饭赚了20多块钱……
(ㅎ‸ㅎ)………………
至今没搞明白这是什么发家致富的鬼bug。","关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。

=====
2025/1/6更新：
想不到这个偏技术的回答居然收到了我在知乎最多的赞，不知道是被谁翻了牌子，有没要在这里更新一下。
我参加革命时间晚，随路信令只在教科书上读过，没有亲见。 在评论区 @墨枫梧桐BA7MQN 和 @点点， @PROZAC 老师的引导下补习了1号信令。 呃，一句话，如果中继线路有使用带内单频脉冲方式的1号信令，一个持续600毫秒的2600Hz脉冲就可以把通话掐掉。
@Music-X 老师甚至进一步推理出乐器的调式。可惜5年前买的小玩意儿早已找不到了，某宝上的购买链接又提示商品下架。不然我拿来吹一下，测一测频率是不是2600Hz, 就可以正式破案。

======
2025/1/11更新:
我找到了这玩意儿，他长这样：
网上找到了当年的谱子，这个样子
唯一的问题是，6 吹出来是2355HZ，7才是2616HZ.

要么就是我记错了断线时吹到哪里了， 要么就是2355也在2600的误差范围(也太远了点），要么就是前面的随路信令猜测不对……"
被公司卸磨杀驴能把代码删除吗？,"卧槽，你们都要埋雷给公司造成损失吗？
我当年正常写就行。","删除代码违法，但删除代码的注释不违法。
删除代码违法，但使用奇怪的函数名不违法。
删除代码违法，但调用乱七八糟的库不违法。
删除代码违法，但加入无用的代码不违法。","想反抗又不敢反抗的时候
可以试着加倍努力干烂活，撸起袖子加油干.....烂活
态度一定要端正，水平一定要稀烂
——
我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示
他敢10点给我打电话，我就凌晨1点给他回","删除代码你什么也得不到，除了泄愤外屁用没有
不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构

注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度
活用变量闭包，闭包内外变量名称尽可能用一样的，这样整个代码就会看起来逻辑极其混乱难以分析，配合注释下毒就算尤雨溪来了都得琢磨半天
大量使用语法糖和各种简略写法，比如六七个箭头函数裹在一行里
高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山
内存能不回收就不回收了，等着它内存泄漏
不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了
把关键逻辑写成一个开源库再引用的办法，引用版本号一定要写latest，离职后自己把开源库release一个会炸的新版本，等下次依赖自动升级就直接全炸

总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人
好吧，我还是年轻了，没想到我还能遇到更离谱的哈基神
印度外包公司的代码不但几乎完全实现了上面的部分（除了开源库他们写死了旧版本并且在cmakefiles里面下毒增加迁移难度）
同时还实现了更多的屎山
所有能复用的代码都是复制粘贴的，一个项目两套UI每套UI都有对应的一套重复的代码
注释里全tm是疑问句，以至于我怀疑这群哈基神的精神状态
全局变量左飞一个右飞一个
没有单行长度限制，不开自动换行能把带鱼屏撑出去
修bug全靠加三元运算符，一行里面四五个三元运算符
在尽可能符合给出的要求规范的情况下尽可能的用了各种不安全的设计，明文传密码，本地起服务器和webview通信还留了个远程任意执行的大雷
没有处理任何race condition但到处都是多线程，会产生114514种不同且无法复现的问题
我有时候都怀疑咖喱的原料里面是不是有见手青","卧槽，你们都要埋雷给公司造成损失吗？
我当年正常写就行。","某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。
真是……太高看我了，写完不到一个月我基本就忘光了","首先，屎山，bug，是合法的
代码写的差是合法的
代码中引用一个你自己的库(一般情况下)是合法的
写的代码先不提交是合法的
git合并时删掉一些代码也是合法的(合并代码又冲突嘛)
写代码不考虑特殊情况也是合法的
sql不防注入是合法的
域名解析源站ip是合法的
漏洞不修是合法的
多用点停止支持的库是合法的
多写点报错自动退出是合法的，什么参数错误管他什么直接报错
判断写严格点是合法的，发现问题立刻报错而且不输出问题
不写注释是合法的
什么？公司用的是1.8的jdk？没关系，用最新的jdk是合法的，直接把编译完成的代码传上去
突然又想到一个：写前端的兄弟们，用webpack来格式化代码如何～
但你恶意删代码
1.(可能)没有效果，gitsvn直接恢复
2.如果删掉无法恢复那等着公司法务吧，违法的

兄弟们评论区不看后悔一辈子","驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。
但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。","不能，这样犯法。
但是代码质量不过关是可以的。
你品你细品。","劝开公司的，对各种技术人员好一点，
如果你用，这两年估计你遇到过，
有一个病毒，中招就会现实这个：
程序员要是泄愤，删代码并不是好主意，
在代码中加东西才是好方法。","十几年前我接私活，帮别人实施一个政务软件项目，合作方老板承诺1万的好处费。
当时环境是Windows Server，我开了远程权限，写了脚本放在计划任务里，预防对方付款上磨磨唧唧。
后来担心的事情还是发生了。
我遂告知对方删除map（map及坐标数据是我私人提供的，没备份的话删了就彻底没有了）、删除应用程序以及格式化系统os的时间计划安排。
双方电话里相谈甚欢，互相给予对方温暖问候之后，我爽快的拿到了一张中行的支票。"
有哪些让你目瞪口呆的 Bug ？,"关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。

=====
2025/1/6更新：
想不到这个偏技术的回答居然收到了我在知乎最多的赞，不知道是被谁翻了牌子，有没要在这里更新一下。
我参加革命时间晚，随路信令只在教科书上读过，没有亲见。 在评论区 @墨枫梧桐BA7MQN 和 @点点， @PROZAC 老师的引导下补习了1号信令。 呃，一句话，如果中继线路有使用带内单频脉冲方式的1号信令，一个持续600毫秒的2600Hz脉冲就可以把通话掐掉。
@Music-X 老师甚至进一步推理出乐器的调式。可惜5年前买的小玩意儿早已找不到了，某宝上的购买链接又提示商品下架。不然我拿来吹一下，测一测频率是不是2600Hz, 就可以正式破案。

======
2025/1/11更新:
我找到了这玩意儿，他长这样：
网上找到了当年的谱子，这个样子
唯一的问题是，6 吹出来是2355HZ，7才是2616HZ.

要么就是我记错了断线时吹到哪里了， 要么就是2355也在2600的误差范围(也太远了点），要么就是前面的随路信令猜测不对……"
有哪些让你目瞪口呆的 Bug ？,"魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","关于考勤打卡的
我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了
当了很长时间的黑户
后来虽然又添加回来
但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份
直到我发现
我请假系统里不扣年假
哈哈哈哈哈哈哈
无限续杯","魅族手机把sim卡名称改成“无sim卡”
系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行
解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡","一个老爷子卖酸奶
三块一瓶，十块三瓶
来个小伙子
“大爷，来瓶酸奶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷，再来一瓶！”
“三块！”
“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”
“呵呵，每天都有你这样的来一下买三瓶！”","有，不过是店员目瞪口呆，而我稳如老狗。
06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。
有次晚上请同学去吃，我说先来四个汉堡。
店员，“四个汉堡，14.5元。”
我，“不是14吗？”
店员，“三个10元，加一个4.5元，是14.5元啊。”
我摆摆手，“不要三个加一个，我要两个，加两个。”
店员，………………
好了，可以点其他的了。","有一次，上班时指头被a4纸划破，
虽然伤口不大，还是挺疼
就用创可贴把中指贴了一圈
第二天早上起来
打开一看，我去
竟然完全愈合，毫无痕迹
突然想起周星驰电影《功夫》里的
练武奇才
难道，我也是？
就在我向同事吹嘘时
他默默来了句
你看你中指旁边的指头
汗……
贴错指头了","写代码的时候记得把显示器屏幕擦干净点。。。。。。
-一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻","那年在淘宝买笛子，商家送了个陶笛，大概长这样：
娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。
我上班时她得意地打来电话，说已经学会了2句，要吹给我听。 商家送的谱是“女儿情”， 她吹“鸳鸯双栖蝶双飞，满园春色惹人醉”，吹到一半电话不小心断了。好不扫兴，打过来重吹，吹到一半电话又断了！ 如是三次。
这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！

坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。

=====
2025/1/6更新：
想不到这个偏技术的回答居然收到了我在知乎最多的赞，不知道是被谁翻了牌子，有没要在这里更新一下。
我参加革命时间晚，随路信令只在教科书上读过，没有亲见。 在评论区 @墨枫梧桐BA7MQN 和 @点点， @PROZAC 老师的引导下补习了1号信令。 呃，一句话，如果中继线路有使用带内单频脉冲方式的1号信令，一个持续600毫秒的2600Hz脉冲就可以把通话掐掉。
@Music-X 老师甚至进一步推理出乐器的调式。可惜5年前买的小玩意儿早已找不到了，某宝上的购买链接又提示商品下架。不然我拿来吹一下，测一测频率是不是2600Hz, 就可以正式破案。

======
2025/1/11更新:
我找到了这玩意儿，他长这样：
网上找到了当年的谱子，这个样子
唯一的问题是，6 吹出来是2355HZ，7才是2616HZ.

要么就是我记错了断线时吹到哪里了， 要么就是2355也在2600的误差范围(也太远了点），要么就是前面的随路信令猜测不对……"
为什么祖传代码被称为「屎山」？,"一个有趣的事情，
一个哥们上班时忽然怒气冲天，大声质问这TM谁写的代码，这么明显的bug都能出，还不写注释，当时项目组的码农们都心惊胆战，不敢说话，害怕把自己揪出来示众。
项目经理听到发话了：XX，你查一下SVN记录，查出来全公司通报，扣他年终奖。
这哥们：我已经在查了....
过了几分钟......
这哥们：不可能吧，这怎么可能呢？
大家都凑了过去，发现这段代码是这哥们一年前自己提交的。
为了避免过度尴尬，大家都没再提这个事情。
---------------------------------------------------
回到问题，是的，都是一堆臭屎，不做记号的话，还真分不出来是不是自己拉的。","一个有趣的事情，
一个哥们上班时忽然怒气冲天，大声质问这TM谁写的代码，这么明显的bug都能出，还不写注释，当时项目组的码农们都心惊胆战，不敢说话，害怕把自己揪出来示众。
项目经理听到发话了：XX，你查一下SVN记录，查出来全公司通报，扣他年终奖。
这哥们：我已经在查了....
过了几分钟......
这哥们：不可能吧，这怎么可能呢？
大家都凑了过去，发现这段代码是这哥们一年前自己提交的。
为了避免过度尴尬，大家都没再提这个事情。
---------------------------------------------------
回到问题，是的，都是一堆臭屎，不做记号的话，还真分不出来是不是自己拉的。","最近公司的电梯出了问题，平常从1层到8层都畅通无阻的电梯，偏偏在经过4楼时神秘的跳过了这一层。
原本负责修理电梯的老程序员已经被扔进电梯井了，所以老板决定由你全盘负责电梯的修理和维护。
你简单研究了下这部电梯，似乎初步找出了问题的关键所在。
这部电梯的1层到4层是一个老程序员修建的，而后面的5到8层则来自于另一位跟你水平相仿的程序员。
这也就是说，问题很大可能正是来自于4层到5层的接缝处，随着公司大楼的不断加高，原本生效的程序发生了某些错误的吻合，才导致4层被神秘的“跳过”。
了解了问题所在，你立刻开始针对性的开展工作，在你的妙手回春下，你和你的老板一起眼睁睁的看着电梯不可逆转的上升，向上、向上，甚至还顶破了8层的天花板，在一众员工的众目睽睽下消失在了高空之中……
显然，问题从来不会这么简单的解决，你决定研究下那些延伸进钢筋混凝土深处的钢索，刚研究没多久，公司的女同事就过来对你破口大骂——因为电梯的钢索会影响厕所换气扇和电灯的开关，让整个厕所像极了三流鬼片的拍摄现场。
你开始意识到问题可能稍稍超出了你的想象，面对老板的不断催促，你只能赶鸭子上架般拿出了你的最终方案:
1.要求前往4楼的人站在电梯的后半部分。
2.在电梯下方安装滑梯。
3.将电梯后半部分的地板换成活版门，当检测到有人按4楼时，在5楼开启活版门。
4.最重要的一步，关闭电梯内部的光源，将电梯变成后来人看不明白的黑箱，也就没人会来找你的麻烦了。
虽然有些员工抱怨前往4楼时会遇到匪夷所思的失重感，但这无伤大雅的问题跟4楼的恢复使用又能算得上什么呢？
你唯一需要知道的就是，你成功的解决了公司的问题，你的薪水翻了三番，而且你因为业务能力出色被调到了跟程序毫无关系的领导岗位，甚至还跟前一任修理电梯的员工当上了同事( )
至于你问那个电梯？要相信后人的智慧。
而“去4楼只能站在电梯的后半部分”则变成了一个公司的都市怪谈，没人知道这古怪的规定是如何生效的。
但它正在客观实在的发生，不是吗？","有一天，有几条虫子，干扰了老板赚钱，老板希望你能抓住它们。
你带着年轻的锐气，青春的活力，学艺多年积累的程序设计艺术，打开了公司的代码仓库。
远看，似乎一个运转的机器，巨大的代码堆积在一起形成了大致的轮廓，蠕动着前进。
凑近了一看，在不净的框架中，乱码般的语句在运转，像生了麻风病的蛞蝓一样在喷吐，粘稠的水在流动，而穿着格子衫的人群则在焰柱旁围成了一个半圆，这就是码农的仪式。他们环绕着那不可名状植物，不断的伸手进去拨弄，又不断的掏出一些东西填上去，使他堆的更高，为了防止倒塌，又掏出黏糊糊的糊糊，用力的涂抹，试图把它们黏在一起。
这是一个前人留下的屎堆起来的一个克苏鲁缝合怪，看起来摇摇欲坠，有无数的虫子爬来爬去。但勉强堆起了山一样的形体，蠕动着为老板赚钱。
你满心热血，要对这座山进行清理，使它成为一个鲁棒的钢铁巨兽，可以随时更换最新的部件，奔腾如飞，坚固异常，带着兄弟们走向人生巅峰。
你经过缜密的分析，顺着虫子留下的痕迹，终于找到了问题的源头，发现一坨很多年前某码农因为时代局限或者水平有限拉的陈年旧屎，你觉得只要对它改良一下，梳理清楚结构，加强判断与容错，就可以变化成一个钢铁部件，让这坨怪物离巨兽更近一步。
你用力的挖掘其中的信息，却发现，事情没有那么简单，这一坨实际上不是孤立的一坨，而是和整个山体融合在一起。或者说，这座山实际上是一坨坨粘稠滑腻的克苏鲁，通过无数的触角和粘液连接在了一起，这些克苏鲁伸出无数的触角，伸进这座山体中未知的角落。
有看起来结构相同，但是出现了几十上百次的重复逻辑。有无数道不知道伸向何处的判断分支。有七零八落到处都是又无法解释的神秘数字。有从表面直接伸向最底层的神秘调用。还有猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。还有无数神秘的线程在独立的挂在那里，猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，哪些资源会莫名其妙的被改动。神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。
他们耦合在一起，互相支撑，构成了一坨更大的克苏鲁屎怪，缓慢的蠕动。
你极其困难的清理和修改了其中的一点点内容，让这一点点的内容脱离出耦合态，看起来清晰一点。结果，忽然屎山对面十万八千行外，你永远意想不到的一块功能，忽然挂了。一个你完全在工作上没接触过的同事，通过他的盘查，发现是他维护的一个函数/方法、类、线程、内存块，池，和你改动的部分是深度耦合的，你的解耦导致了难以理解的错误使他们的部分产生了错误。于是你被骂了，你只能再退一步，在一个更小的范围内进行调整，但是发现，虫子不止是由这一块构成的，于是你追踪者虫子的足迹，去改良一个一个的模块。
在经历了一轮又一轮的批评，几乎结识了全公司所有模块的负责人之后，你终于抓住了一条虫子。但是在这个漫长的过程中，你早已忘却初心。在无数次的赶工加班熬夜的迷糊中，被同事老板挨骂后的愤懑中，表白失败/和女朋友吵架/发现自己头顶有点绿的低落中；无数次当做临时代码写下，计划单元测试完成后就重写却忘记的过程中，因为偷懒或者不舍得打断思路而而懒得抽出轮子而产生的超大代码块中。
留下了无数看起来结构相同，但是出现了几十上百次的重复逻辑。无数道不知道伸向何处的判断分支。大量的无法解释的神秘数字。从表面直接伸向最底层的神秘调用。猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。无数猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，莫名其妙改动资源的神秘线程。神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。
你要抓的哪条虫子确实抓出来了。然而，在你没看到的地方，随着运转，更多的新的虫子正在茁壮的成长。
这时，你突然发现你的脚抽不出来了，几条触手顺着你的腿向上攀延，你的手被深深地吸入泥沼一样的屎山，你使尽全力想要抽出胳膊，但越是挣扎，陷得越深，仿佛屎山中心有一个冰冷的黑洞，要将所有接近的物体吞噬殆尽。你的精气在一点点流失，一种极度的疲惫，但是又释然的感觉涌了上来。此刻，你觉得舒适又满足，渐渐地闭上了双眼，你甘愿奉献头发与生命，将自己化作一块补丁，维系着系统的苟延残喘。它再也没法离开你了，你和你的头发，成了它的一部分。
不知道过了多久。终于又有一条虫子在运行中暴露，干扰了老板赚钱。
老板又安排了一个年轻人来抓住这条虫子。这个年轻人带着锐气，青春和活力来到这座山前。
看到这摇摇欲坠的克苏鲁大山，不仅倒吸一口冷气。
“oh shit ! shit mountain !”","直到改出了 bug，才知道原来某行代码是干这个用的

n天后，我擦，那行代码不止干了这个

又n天后，我擦，这种代码不止一行

又n天后，妈的，老子也搞上去了几行","屎山？小公司的祖传代码才可以叫做屎山。
大公司的祖传代码，那是屎海上漂浮的僵屎山。
你就在这屎海里面漂着，一旦进来了，就出不去了。
每天的工作，就是在粪泳前进。还有拉着部门的粪船前进。
各个部门的粪船每天继续产出新鲜的屎，投放到屎海里，它们不断聚集，成为新的屎山。
旧的屎山顺着洋流还相互亲热着，迸发出岩浆般热情的屎，掉落在你头上和身边。
你不得不一边拼命地游以自保、一边还想尽办法地不沾太多屎到身上。
系在你身后的是部门的大船，部门领导坐在船上，用伞和棍子推着避免撞上屎山。
偶尔有个负责的领导，还会愿意让你上上船休息。
可惜一旦你沾着太多的屎了，或者让船沾着太多的屎了，就等着被踢下船去吧。
偶尔有那心有抱负的人，尝试着改变这一切。
他们以为找到了一些仿佛可以容易对付的屎山，想着要重构，说他们看到了一条干净的出路。
但是，他们还是太年轻了。
因为，他们看到的，只是屎山的一角。
他们带着部门的船从旁边划过，却不知这就是昨日的泰坦尼克。","第0天，你发现电灯开关离床很远，每次睡觉关灯都很麻烦，于是把电灯开关封锁起来，从里面拉了一条连杆到床头，用机械传动的方法缩短了睡眠区域和开关操作区域之间的距离。

第1天，你觉得这样还是太远，打算再把它改造成遥控的，于是你做好了自动按按钮的装置和遥控器。此时你面临三种选择:
0.直接把装置装在新按钮上
1.把连杆拆了，把装置装在旧按钮上
2.把旧按钮拆了，换成传感器
你想了想，好不容易做好了，不用多可惜，于是选择了0。

第2天，遥控器不见了，你找了老半天才找着，心想这遥控器好是好，就是容易丢，于是一气之下用强力胶把它粘在了地上。
你冷静下来一想，不对啊，直接在床上合适的位置搭个小桌板，把遥控器固定在那上面不就行了？
真聪明，可惜现在遥控器死死黏在了地上，要想扒下来就得把整个地板拆掉。
好巧不巧，你在某宝上发现一个电动伸缩器，一接到信号，就会像一根手指一样伸出来，然后缩回去。
你大喜过望，赶快买来了伸缩器，吊在旧遥控器正上方，再量好了自己睡眠时手的位置，在那里搭了个小桌板，把伸缩器的遥控器粘在上面。这样，你睡觉之前只需要按一下小桌板上的遥控器的按钮，伸缩器就会按一下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第3天，你感觉这小桌板硌得慌，于是把床平移了一段距离，清空空中空间。但这样，按钮又太远了。于是你去某宝买了个声控灯和一块黑色的幕布，罩在小桌板上遮住新遥控器，又给伸缩器装了温度传感器。睡觉前只需拍拍手，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到升温,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第4天,你发现最近气温变化迅速,温度传感器总是误报。于是你接了一台电脑、一个机械臂、一个视频识别仪,每隔一秒,机械臂就会操作电脑刷新显示实时的外界温度的网页,再由识别仪扫描电脑屏幕,读出温度数字,由此刷新温度基准值。于是现在,睡觉前只需拍拍手,声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第5天，你发现声控灯时常因为环境噪音误启动，但又没有说明书，不知道怎样把它拆开来调整启动的分贝阈值，于是又买了一个语音识别信号器，把它的输出口和声控灯的输入口封在一个密闭的隔音空间里。只要你说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第6天，你嫌每次睡觉前都要说话太麻烦，于是在床下装了一个压力板，连接一个录音机。只要你躺下，压力板就会启动，录音机就会说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，伸缩器就会受热膨胀按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第7天，你感觉自己还是很怀念点按按钮的快感，于是你买来一个机器人，在床下压力板四周装上了复合杠杆和摇杆，把床顶起来，减轻压力板收到的力。只要你按下按钮，机器人就会摇动摇杆，床就会下降，压到压力板，压力板就会启动，录音机就会说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。

第8天，你发现你的装置失灵了，起初以为是机器人坏了，于是拆开了机器人，发现没有坏。无奈之下你只能把机器人和摇杆强行报废断开，自己摇动摇杆，发现摇杆也没坏。于是你只能把复合杠杆再拆成一节节钢棍去调查压力板，发现压力板也没坏。你只好把录音机的电路剪开，发现也没坏。只能破开小桌板看隔音空间的外壁，也没坏。于是撬开隔音空间看声控灯的接收器，发现也没坏。于是撕破幕布看声控灯的灯泡，没坏。伸缩器的手指，没坏。地上的遥控器，没坏。你一不做二不休把地板穿了个大洞把遥控器取出来，没坏。旋转器，没坏。连杆，没坏。敲开封装的盒子，原来是大灯的一颗螺丝松了。
你把它拧了回去。

第9天，你还是像9天前那样从床上跳起来，关灯，跳回床上，睡觉。","说到祖传代码不得不提当年在移动的一段经历。
我刚入职第一天，旁边的妹纸告诉我，你是今年第五个负责这个模块的，心里凉了半截，这TMD才七月份啊，听她说最长的干了两个月。
我就不信那个邪，页面交互一般，后端不也就增删改查？能难到哪里去。看了代码才知道，too young，too simple。里面最老的代码是09年那会的，直到现在一直在维护，今刚好十周年庆典，我光荣接盘，这大概就是代码届的接盘侠吧，现在用的还是jdk1.6，不分什么前端后端，页面都是用Java写的，最坑的是里面的js，有四五个公用的js文件，大概几万行代码，注释掉的代码占三分之二，大概是我这么多年见过最多的注释了，是谁说注释多的代码质量高的？出来，我不打死他。
说来也怪，两个月了还没给我安排需求，就是来的那个礼拜说了句让我看代码，每天早上一杯咖啡，页面点一点，心情好就看看代码，日子过得很是惬意，这大概就是程序的春天吧！真不知道前面那四个哥们放着这大好的日子不过，咋跑了呢？
一天中午，项目经理喊我，问我代码看得怎么样了？从项目架构说到业务逻辑，其实有个屁的架构，随便扯了五六分钟，项目经理笑了笑，点了点头，很是满意的样子。
“小李，这有有个bug，你去修一下“
“嗯嗯，没问题“意料之中，毕竟也快两个月了。
“下个月初，你争取弄完哈“说话的时候十七八号的样子。
“没问题。“
开始写代码了，带着一丝激动，毕竟两个多月没操练了，也带着一丝胆怯，因为是个人都能看出来这是是否能顺利转正的关键一战。
两个多月来，最认真的看了一天代码，我在哪里？我是谁？我在干什么？是哪个智障写的函数，十几个行参，变量命名汉语拼音占了一大半，我严重怀疑这是小学生写的代码，还智障一样的不分前后鼻音，小学语文老师怕是后勤老师教的（真不是看不起后勤老师），函数内部无止境的递归调用，本以为快结束了又来个回掉函数，一个函数有800多行。果然出来混还是要还的，过了两个月的春天，一下子跌进了冰窖。
这样的日子浑浑噩噩的过了七八天，招我进去的那个技术老鸟实在不忍心，过来指点我。
“小伙子，你这样看代码，估计明年春天也搞不定，你这个bug，是第三个人上线的时候写出来的，你重点看下他提交代码的部分“
一语惊醒梦中人，只能用这最白痴的办法了。
看了三天，终于找到问题所在，花了十分钟，搞定。然后技术经理核查了我两个小时代码才放心让我上线。
后面有一次和项目经理吃饭，“小李，前面四个人都跑路了，我就看好你，你知道为什么当初你刚来那两个月，我啥也没让你干？我是怕你一开始就做需求，扛不住跑路。”
“经理，那代码那么老了，怎么不重构一下“
“上一次重构代码的项目经理已经被大老板开了“","几年的代码也好意思叫shit山？这种东西得在微软/电信公司这种toB地方才恐怖。
我司有些代码我正好要升级gcc版本，要试试转docker踢到云上去，然而这批代码写于2000年前，那个酸爽哦。最早的部分可能写于1980年代bell实验室，第一批维护升级做需求的人早就退休了，第二批也退休了，每一行代码动起来都胆战心惊。
这会出现什么结果呢，重构花费时间极长，但是b端客户对稳定性和可升级性的需求不是普通客户能比，所以历代开发在这个坑上只能采取坑上盖板子这样的方式继续开发，坑传个10年20年，从底子上来看问题多太正常了。质量全是靠工程手段维持。框架稀里哗啦，代码风格迥异，逻辑不知道干什么，早期代码没有注释，指针到处乱来，文档有一本砖头一样厚的90年代开发指南，那感觉，嘿嘿嘿。","公司代码已经40年了，最早写代码的人不知道是否活着，要命的是文档没留下。
你们几千几万代码算什么，这个比微软系统还大。项目代码堆在一起有90多G，目测过千万行。
像int2 int4 int8 uint12345678这种类型定义上千种。无意中，翻出了一个用于定义的头文件，24万行的#define，我不知道这是不是人类写的。
我们有个古老的更新记录，当然，没有汉化版，像读一本流水账样的历史书。代码被美国人、印度人、中国人、澳洲人都更新过。
时代在发展。
像文本格式的数据库早就不用了，而我们却在用它包装n层并转换成sql。
你问我们怎么添加一列数据库字段，嘿，用手写数据库，用祖传的文本工具把它转换成代码，再添加进各个工程配置中，再一个个的编译，别忘了在sql中添加这一列，对了，你用多大的数据要写清楚，32字节，不要写多也不要写少，中间空4个空格你知道吗？写错了整个工程会出现莫名奇妙的错误。这些做完了。一天结束了。
像MFC已经不美了，我们却用托管C++强行封装并中转成WPF，然后，引用WCF是作为中间桥梁进行通信的。
托管C++你们知道吗？那可是编译器都看不懂的东西。能编译通过，只是在编写的时候一直是上万个报错的，你要自己用脑子想这东西能不能编译，不能依赖VS自动检查功能。
由于底层各种封装，封成迷宫了，VS经常解读到崩溃，编译到死机，自己去看的时候，几百层的调用栈中又有几百种重构函数。
工程之间的逻辑好复杂，主要是几千个工程太多了，dll与lib已经傻傻的分不清楚了，哪些有哪些的依赖，先编译这几十个工程，然后才能编译那几十个工程，要按照一定顺序来，不然依赖会报错。想哭。
哦。。我在里面添加个helloworld是多么不容易，要写一天，模块上千个，结构体万万不能动，任何一个结构体的修改会导致整个项目的瘫痪并要重新编译一整天（也许到最后是失败的）。
看代码就像走迷宫，对着一个函数按下F12之后，等着转圈圈，然后就会出现几百个定义索引，不是老玩家谁知道应该去哪个定义索引。
迷宫都比它简单，起码只有一条完美的出路。
真是大粪堆。
吐槽完了。继续搞这坨屎。
匿了，怕公司看。
过去一年了。感官上不一样了，再搞两年成熟练工就不再痛苦了，只是英语还需要更高的水平，听印度人讲英语还是听不懂。","驾驭屎山的唯一方法，不是重构，而是不重构。
为什么有人可以在屎山里加功能？
很简单：把屎山扒拉开，每块闻一闻，找出和你要改的功能对应的那坨屎，把这坨屎包起来（封装），你就可以假装它不是屎，是巧克力。然后，在旁边拉一泡新的屎，等它风干成型（测试通过）就可以收工了。
当然，怎样优雅地在一座屎山里闪转腾挪，做到“百屎丛中过，片屎不沾身”，还是需要很多经验和技巧的。不过说白了，就算失误了摔个嘴啃屎，臭也只臭你程序员一个，老板还觉得你很努力，客户还觉得真香。
很多愣头青觉得自己是天才，可以把屎山重构了。他们中的大部分人引发了屎崩，永远埋在了几千米高的屎山之下。
极少数人活了下来。他们真的做到了，他们真的重构了整座屎山！
重构之后的那个东西，被后人称为——屎山2.0。
当一个系统复杂度增加的时候，它的熵也会增加，这是宇宙规律。而某些有洁癖的码农，他们非要强行降低这个复杂系统的熵——不是做不到，但需要巨大的能量，也就是成本。
你想让谁来付这个成本？老板还是客户？
屎山不是一天拉成的。每一代屎山的建设者，都是非常聪明的人。他们非常清楚继续堆高屎山，未来将产生的代价。他们理性中立客观地评估了推翻屎山重建的成本，然后做出了一个充满智慧的决定：
在屎山上继续拉屎。
这个决定对于每一个人都是最优解，因为每一个人只需要对他当下的目标负责。每一次“继续拉屎”的决定都是正确的，不这样做才令人匪夷所思。如果重构屎山，客户很生气，因为交付时间更长了，还会冒出许多以前没有的bug。老板很生气，因为成本大增，而客户毫无多付钱的意思。就连重构屎山的人自己也很生气：天天钻在屎山里996，搞得浑身屎味，工资却一分钱没涨。
尿海不择细流，故能成其大；屎山不拒细壤，方能就其高。屎山就这样一天天长大，终于令最后接手的码农感叹：高山仰止，景行行止。
其实，屎山，是任何复杂系统的终极归宿。无论你使用何种语言，师从什么流派，哪怕23种设计模式样样精通，最终还是会踏上前往屎山的道路。因为，条条大路通屎山。
就连微软、谷歌、Oracle这样的大公司，他们的产品也都是屎山。Oracle每改一个功能，全公司的服务器需要全速测试几个月。chromium浏览器的源码有十几个G，虽然是开源的，但没有人敢在如此险峻的屎峰上提交自己微不足道的屎坷垃，高处不胜寒。
至于微软，呵呵……从win8到win11，10年了，控制面板还是有两种口味：一种是古早味的，一种是苹果味的。office从2016到2021，5年了，不拿放大镜都看不出有什么区别。
这段话可能会让你误以为，微软、谷歌都是垃圾。但实际上，他们是地球上最强的软件公司。世界上最高的屎山，都是最聪明的屁股拉出来的。换了一般的程序员，屎山还没垒出一个小屎包，就屎崩了，就这点水平还天天嚷嚷着要重构屎山。
乔布斯曾说：死亡是最好的创新。所有代码的最终归宿都是坟墓，而绝大多数代码早已死无葬身之地。屎山是不可能重构的，这辈子都不可能重构的。打败屎山的唯一方法，唯有另起炉灶，建一座新的屎山。这就是为什么在巨头们巍峨连绵的屎山脚下，总能有新的小屎包崛起。
当然，对于血气方刚的少年，我知道，你很可能觉得我在扯淡，屎山有什么好怕的，重构就是了。
明知山有屎，偏向屎山行。来，壮士，干了这碗屎，我绝不会拦着你。
我只会献上一本秘籍，祝你早日成功：
作为一名有理想的程序猿，我也在努力建造自己的屎山。
我想做一个能直接翻译英文pdf的工具，不是划词翻译那种，而是一次性翻译整个文件，英文pdf进，中文pdf出。这样看论文就可以偷懒了~
链接如下，感兴趣的同学可以试试。目前只有PC版，APP的坑一直没填：
大中华区Rust语言代言人 @张汉东 老师在试吃之后，只评论了两个字：
神器。
他翻译的pdf是这样的：
说实话，得到这样的评价实在出乎我的意料，因为我还从没试过翻译编程领域的文章，初看貌似效果还行。不过，我在受宠若惊的同时，也暗暗感到惭愧。因为只有我自己知道，屎山里还有多少坑没填……
不说了，我要进屎山填坑了……
如果你喜欢我这种用脱口秀style把道理讲通透的风格，可以尝尝我最近出版的两本科普书。这两本书都入选了2021年度CCF“科普阅读推荐图书”榜单。CCF是什么，对于程序员就不需要介绍了吧……
一本既不吹捧科学家的伟大、也不纠结历史细节、只想让你无废话看懂量子、还吭哧吭哧手绘100多张彩色漫画实验图解的硬核科普：
广告
猫、爱因斯坦和密码学：我也能看懂的量子通信
京东
¥68.00
去购买
一本不屑于教Python和调参、只想和你探讨人类命运和智能本质的AI科普：
还有不赚钱、只求交个朋友的套装："
王小波的计算机水平有多好？,"王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？
谢谢各位！！","以下文字都是我本人写的。为了让阅读方便，减少模糊性。我在文中以第三人视角描述。 而不用“我舅舅“，”我姥姥“，”我大舅舅“，”我小舅舅“之类的称呼。 这是一个十几年软件工程师的习惯而已。
我舅舅是王小波。我是个禁不住人肉的老百姓。资质平庸。 王小波一篇《我是怎样做青年思想工作》的杂文在我青年单身适龄的年代，给我个人做了最大程度的广告。算是他老人家留给我最宝贵的遗产之一。 除此之外，还有他那台用了很久的PC，在他去世前一年送了我。
他是汇编高手。自己用汇编写了DOS下的汉字输入法。输入法有个功能，可以加4声。 一般拼音输入法没有这功能。这需要普通话读音正确的使用者。90年代总共也没几种汉字输入法。看过他用自己输入法打汉字。速度几乎和盲打英文一样。那时候我大学，正在疯狂苦练吉他。并没有弄懂他用了何种技术。虽然我从小学也用Z80和APPLE II 做些机器码编程做游戏。但到了中学为了高考，计算机就荒废了。
他人生最后几年，WINDOWS 3.2开始普及。然后是WIN95。 他开始从DOS转向WIN32 SDK编程。最终非常任性地熬夜苦干了很长时间，把输入法转为WIN32 SDK 在WINDOWS下正常工作。当时WINDOWS已经有不少汉字输入法。 尤其到了WIN95时代。 他这么做也只是出于兴趣而不是在DOS时代的必须。就WIN32 SDK我们还讨论过一些。那时候win32 sdk真的是很难用。主要是互联网还没有（我是96年后用上的），资料很少。匈牙利命名法陌生。WIN32的体系和DOS大相径庭。全部都很陌生。而且完全抛弃了DOS那套东西。所有90年代DOS底层程序员向WIN32的迁徙都是一部血泪史。
他人生最后一年，多媒体开始普及。光驱，声卡，2D加速卡普及。95-96年他开始和我合计做多媒体出版。原因现在想起来很悲伤 ------ 他的书很难在大陆出版 。 他不得不想办法让他的作品能够让更多人看见。而平时维持生计，只能忍着严重的痔疮，每日给各种杂志写杂文稿件。 多媒体的兴起，让他感觉也许可以利用他的技术优势，自行制作电子出版物。配上插图，音乐，用电子书籍方式可以让自己作品为大众所见。他给我看了已经制作了一部分的DEMO。就和现在用Micromedia多媒体制作软件制作的电子多媒体制品很像。电子书内容是黄金时代。有图案的背景。按空格可以翻页。同时有音乐。好像偶尔还会有一点动画的特效（我记不清了） 。但当时的DEMO完全是他自己用WIN32写的EXE 可执行程序。 他那是从WIN32 SDK移植输入法时，基本掌握了消息处理，GDI，窗口控制等方法。还有一些底层的TRICK。
我大学后和王小波比较近。那几年每周末都在他母亲家相聚。他母亲5个儿女，只有他1个人在国内。于是他就经常住在母亲家，怕老人一个人，是个大孝子。母亲家旁边有个筒子楼里2间房的小屋，公共厕所和水房，冬天暖气烧得极热。偶尔我会和他住一块。里屋是他的生活起居和写作桌。外屋很小只有张床。他弟弟的孩子和我偶然会睡外屋。印象最深的就是他烧普洱茶的电炉和玻璃茶壶。里面总是有极浓的茶水，下面沉淀着大量茶叶。估计熬夜就靠那个。
目睹了他后半截人生（从我记事起到他去世，中间他出国很多年）。感慨很多。王小波有个八叔，当时双手打算盘，无比聪明是个天才。年少夭折。王小波父亲因为搞逻辑学，引起毛泽东注意，被毛接见聊了一下逻辑学的学术相关问题。69岁心脏病发独自倒在家中过世。王小波去世方式和他父亲一模一样。区别仅在更加年轻。王小波哥哥在受文革影响挖了10年煤。后来去美国博士念数理逻辑，解决了一个100多年未解的数理逻辑问题。最后的博士毕业论文自己系的教授搞不定，专门找了数学系的教授来看。毕业后他哥哥因为被文革耽误岁数太大。没有继续科研工作。
我的最大感慨是，留得青山在，不怕没柴烧。天才也好，资质普通如我也好，人都只有一个人生。王小波妈妈去年92岁，10月刚去世，白发人送走了自己两个儿子，又过了十几年才走。之前得过癌症，靠自己毅力锻炼，恢复了。王小波去世后一年，王小波弟弟又突然去世。当时孩子都没敢告诉老人。老太太感觉不对，但又无法得知真相。只是和我说她的疑心。当时国内只有我一人，只能瞒着。不停劝慰老人没事。老太太喃喃说，“除死无大事，除死无大事啊” 。
除死无大事。 人生在世，碰到什么坎，都只会是你人生中一个普通的节点。时间一长，什么都会成为过眼云烟。 留份宽心，也许这样导致目标感没有强到能和社会精英逐鹿。但只要有耐心，不怕挫折，假以时日，目标总会实现的。作为一个42岁还在以玩游戏看动漫为生活主体的大叔，保持健康和有活力地追求智慧和有趣，做自己热爱的工作，保持善良，做精神自由的人，是我从王小波的人生学到最重要的东西。希望每个喜欢王小波的人，都有自己充实和健康的身体和精神。","这个月有两个人被拿出来隆重纪念，都是早就计划好的。

一个是张国荣，一个是王小波。

你得承认不少人是在张国荣自杀之后才听说并喜欢上这个“哥哥”，王小波也一样，97年他死得很突然，名声也在身后突然爆炸了起来。

1994年，王小波的《黄金时代》终于在大陆出版了，华夏出版社搞了一个研讨会，一共只有20多个人参加，李银河亲自上阵做了会议记录。

1994年也是中国互联网元年，中科院高能物理所第一个接入了互联网，丁磊从同学那里借来了一个账号登上了yahoo，张朝阳从MIT回国，王志东创办四通利方，马云创办海博翻译社并在美国第一次看到了互联网，张小龙也是那一年毕业直接辞掉了电信局的工作去了广州。

如果你在那个时候搞一个互联网研讨会，估计能到场的也就是20多人。

说不定里面就有王小波。

1992年前后，王小波写了两年“科技博客”

知乎网友Vernsu把王小波作品、书信里面和计算机、互联网有关的信息全都摘录出来做了一个网页，大家可以点击 王小波和编程 查看全文。

一共18条，其中14条写于1991年春节后到1993年春节前这两年时间里。1992年“更新”最为频繁，王小波写了自己做统计软件、输入法的事情，还有购买、维修计算机的经验之谈。

从中能看出来王小波是在美国读研究生期间接触的计算机，回国之后在人大负责一个计算机室，但是因为软件奇缺，又要做一些社会学研究的东西，所以开始自己接触编程。

王小波先后学了Fortran、汇编语言和C语言。为了做出软件需要的中文窗口和在电脑上输入自己的小说，他参考严氏拼音做了自己的输入法，实现了自定义拼音字库、输入后再修改这样的“高级功能”。


因为王小波的IBM PC/XT内存很小，李银河又不准他花钱买新的，所以他费了很大精力把软件的大小控制在55K以内，这让他很得意。但是因为turbo.c的原因，软件兼容性不太好，而且图形显示的速度一直不行，让他承认自己技不如人。

如果当时有互联网让王小波可以把这些文字共享出来，那他可以称得上是中国第一代科技博客作者。

但是1995年，中国接通互联网后不久，王小波的“科技博客”却停止更新了，最后一条是：

本来中国有几个国内网发展得很快，现在又出了问题，谁要上Internet，必须到有关部门去登记，留个案底，以备当局监控，很有一点监狱的气味。我还不想找这份麻烦，再说，通过ChinaNet联网，每月也要交七八百的月费，我也没有这么多的钱。既然×反对信息时代，我们就不进这个时代罢，有什么法子。所以还是写信好了。

来不及创业

王小波如果不是这么耿直的Boy，他本来是有机会创业的，在他的“科技博客”里面，他已经看出来很多商机，

现在国内软件一面混乱，又逐渐有形成市场之势。首先以年兄学统计这一事实来看，回来做事非有会用的软件不可。

中文软件（严氏By×）我用着尚好，而且又用C语言仿编了一个，程序是我的，拼音字典是人家的，执此招摇撞骗，骗了一些钱。

史玉柱、雷军的第一桶金都是汉卡，如果王小波抓住了软件汉化和中文输入这个“风口”，就不只是骗一些钱的事情了。

我有一段时间很关心PC的发展，听说美国微机多媒体搞得甚火，微机接电视，音响，vedio等等。这玩艺听上去倒是蛮有意思的……Macintosh根本就没打进中国市场，你非带几个可用的IBM微机软件回来不可。照我看，苹果机还是买不得。因为IBM-PC的兼容机队伍庞大。INTEL又总能推出新一代CPU，将来还有大发展。

机器坏了。居然叫人敲去150dollars，老兄真是有钱。现在的微机修理都是换线换板，机器一坏，先找块表量量是不是电源坏了。只要不是电源坏，估摸是哪部分不好，就去买块版换上。我的机器里什么牌子的板子都有了。送出去也是这么修，还要敲你手工钱。我看150什么板子都能买来……中国要加入关贸总协定，这类东西要掉价。

王小波还关心了一阵硬件的发展，研究了国内进口电子产品的政策。因为穷，所以锻炼了自己维修装配电脑的动手能力。如果继续朝着这个方向发展，王小波应该在中关村盘下一个档口销售、维修兼容机，说不定就没有后来刘强东的故事了。

可惜王小波很快见异思迁，开始把精力放到了文学上面，

我现在软件写得出神入化，并做出了各种写小说的工具，别人的软件已不用了。

不过现在我对微机已无兴趣，因为发现写小说也可赚到钱。

从今年初开始写长篇，首先做了写长篇的专用软件，现在基本调通，开始写了。

我们知道写下了《大连金州不相信眼泪》的老榕，后来做了中国第一代B2B电子商务网站8848。一大批文艺青年，包括张向东和王微，先后投身媒体、门户和视频网站的创办。

更不要说今年是内容创业的风口，王小波若是活着，即使已经是接近65岁的人，也符合超级IP的设定，出来拿投资，Papi酱的1200万肯定是不在话下。

但是有个创业的外甥

然而王小波毕竟是个耿直的Boy。

我们没办法验证他如果创业究竟会发生什么，历史不容假设。

但是王小波在《我怎么做青年的思想工作》一文里面写过他的一个外甥姚勇（姚勇本尊 @王书 也跑过来答题了，大家速去围观），也是一个耿直的Boy，喜欢摇滚，喜欢文艺，又喜欢编程，一心把王小波当成楷模。爸妈的话不听，舅舅说话就听。

姚勇听舅舅的话考上了清华，毕业做了程序员，但是没放下摇滚梦，帮水木年华做了一段时间音乐。07年他接受《南方人物周刊》采访回忆王小波，说丁磊曾经来挖他做3D游戏引擎，他不认识丁磊拒绝了，后来发现丁磊居然成了中国首富，

“我当时还摇滚青年的范儿，傻逼嗬嗬还真拒了个首富。要知道后来想做的这白日梦会给我带来那么多技术之外的破事儿，我早上赶着颠儿颠儿给人写3D引擎去了。”

所以就在07年，这个耿直的Boy上赶着颠儿颠儿去给马化腾写了《QQ炫舞》，全盘抄袭了《劲舞团》。


但是毕竟是王小波的外甥，抄完了在CSDN上骂娘，

“下一款游戏没人逼着全盘抄了”。

所以你看，王小波要是生在了今天，说不定就跟这个外甥一样，去给人写网络小说、编段子、做游戏去了。做得不顺，也会吐槽骂娘，骂得比别人都好看。

王小波说过，

“这个世界自始至终只有两种人：一种是像我这样的人，一种是不像我这样的人”。

我们创业者，究竟是像他的那种人，还是不像他的那种人？

----------------------

本文作者老编辑，首发于微信公众号老道消息（laodaoxx），原标题《1995年，王小波的博客停止更新》。老编辑的团队正在招募一名对世界不太友善的女性写手，对时尚和设计要有点感觉，对科技互联网有点兴趣。简历发送到4@bushangban.com","说说我自己的理解。
王小波，新中国历史上最早的程序员之一，小说圈中的Geek！

早在90年，王小波就自学编程、C等语言
独立研发了中文编辑器和输入法
靠买软件赚了一大笔钱
深受很多中关村老板的喜爱
纷纷邀请他做资深程序员

当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考中国黄页的出路，李彦宏还在加州的院子里种菜养花，日后统率中国互联网的BAT连一个萌芽都算不上啊！

这位神奇的程序员
究竟有着怎样的职场故事？
他是如何做到从编程到文学的无缝跨越的？
且看下文



王小波，骨子里有着极客的精神

早在90年代初，王小波就接触了计算机。1988年，他毕业于美国匹兹堡大学东亚研究中心，获硕士学位，那时就知道Macintosh，玩过IBMPS/2。
90年，学习FORTRAN，开始进行数据统计，并开始在北大教统计学。
91年，搞了个用调整字模发生器方法输出汉字的系统
92年开始自学C，做出了各种写小说的工具。
93年开始搞汇编，“下决心买了一台286，这些日子在改造软件，作了不少汇编工作。其核心是它在虚拟保护方式(virtual address protected)下工作，以便利扩展内存(expandedmemory)”。
……

没有理想的应用软件，那就自己创造

早期，因为国内应用软件缺乏，尤其是中文编辑器和输入法。很喜欢写文字的王小波，就琢磨着，能不能自己编一套出来。说干就干，爱捣鼓东西的王小波就利用闲暇时间学习了FORTRAN，汇编，C等各种语言，接着又学习了数据结构，算法的相关知识，还有编译原理，终于创造出了中文编辑器和输入法。

在当时，这两个软件中的任何一个，都是大牛级的Geek才会去尝试的东西。这对一个当时爱写文字的他来说，简直天方夜谭，而且，类似的中文编辑器也就严援朝的CCDOS和求伯君WPS1.0，都是个人倾毕生所学以及背后的长城公司、金山公司投入大量的人力物力的结果。

通过卖软件，王小波也赚了一些钱，这算是最早的商业模式了。很多中关村老板，纷纷向王小波投去橄榄枝，邀请他加入公司做一名资深程序员，但被他一一拒绝。

有钱了干嘛？给自己投资呗。

身后这台就是王小波花大价钱买的286。王小波高兴得一塌糊涂，特意拍下了一张合照。

在当年3月份的日记中对此有翔实的记述，行文之间，甚是得意：
“我终于下决心买了一台286，这些日子在改造软件，作了不少汇编工作。现在终于完全成功，我的软件现在可以编辑400K长的文件，可以把一部长篇小说全部调到内存里编写了。”

当问及王小波为什么要自己开发文字编辑程序？
王小波很淡然地说，别人编的软件我既使不惯，也信不过，就这么点原因。

这种坚韧就像是领导让你去改别人写的代码，看了几分钟之后，你一摔键盘，“费劲，不如自己重新写一个！”

在《似水柔情》一书中，王小波骨子里那种执拗精神展露无遗：“我觉得我还是我，我要拥有一切——今天要是不把那段C++程序调通，老子就不睡了......”

王小波，程序员撩妹之楷模
赢得了一整个银河

读过《黄金时代》、《红拂夜奔》的人，就会发现，王小波笔下的每一段故事都关于一个天真得有点轴的姑娘陪一个不合时宜的男人，度过了那个鸡飞狗跳的年代。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，像极了两颗钉子拧巴起来，钉在洪流里。

两颗钉子我行我素，洪流里的人面面相觑。

这就是王小波，敢说、敢写，简单，率真，是荒唐的时间里真诚的存在。

这也是王小波和李银河爱情故事的缩影。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，天真得有点轴的银河陪王小波，度过了那个鸡飞狗跳的年代。

在第二次和李银河见面时，王小波就向提出交往的要求。李银河在多年之后坦言到，“被其表白后，感到有些难以接受，他的长相……实在是种障碍，差一点就分手了。”

王小波却浑然不在意，还能趁机调侃“一想到你，我这张丑脸上就泛起微笑。” 即使再排斥他长相的人，也不会给他难堪了吧。

有着“整容般有趣灵魂”的他，每每给李银河写信总是这样开头：“你好哇，李银海“，字里行间透出类似孩子般的对爱的渴望与无助。



《爱你如爱生命》一书，记录了王小波对李银河说过的情话：
咱们应当在一起，否则就太伤天害理啦。
你要是愿意，我就永远爱你 ；你要是不愿意，我就永远相思。
你是非常可爱的人，真应该遇到最好的人，我也真希望我就是。

王小波给予银河的爱，是自由的，真诚的，率真的，像极了他自己。

王小波，IT届的一大“叛徒”
却找到了最好的路

纵观王小波的一生，他对于互联网的深度体验，与其在文学上面的尝试是可以等量齐观的。

玩硬件、写软件、上网写博客、用电脑写作、用软件卖钱……王小波的互联网经历，几乎涵盖了今日程序员生活、工作的各个方面。

然而，混熟了互联网的他，对其已提不起兴趣。

“我对微机已无兴趣，因为发现写小说也可以赚到钱。”

或者说的可以更直白点，王小波学编程就是为了赚钱养活热爱写作的他。

没有人限定了谁的一生该怎么走，不妨问问自己：你想怎么走。

王小波选择了写作。

1992年从北京大学、中国人民大学辞职，王小波成为自由撰稿人，陆续出版了《黄金时代》《白银时代》《青铜时代》《我的精神家园》等知名作品。他的唯一一部电影剧本《东宫·西宫》获阿根廷国际电影节最佳编剧奖，并且荣膺1997年戛纳国际电影节入围作品，使王小波成为在国际电影节为中国取得最佳编剧奖的第一人。


高晓松曾评价王小波，“以我有限的阅读量，王小波在我读过的白话文作家中绝对排第一，并且甩开第二名非常远，他在我心里是神一样的存在……王小波是可以和卡夫卡媲美的。”

一个比高晓松还丑的男子，却被高晓松称之为神一般的存在，可见王小波在文学上的天赋与创作是惊艳世人的。

王小波的这次叛变，是极其正确的。

可就在1997年，4月11日，一个很平常的日子，王小波心脏病突发，一个人悄悄地离开了世界。

在他去世的1997年，也是中国的互联网元年。

这一年，联想超越IBM成为中国个人电脑市场霸主，张朝阳创办了搜狐前身爱特信网站，丁磊在广州创办网易，王志东的四通在线拿到650万美金风投，四通利方体育沙龙上出现了一篇著名的帖子《大连金州没有眼泪》，当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考中国黄页的出路，李彦宏还在加州的院子里种菜养花，日后统率中国互联网的BAT连一个萌芽都算不上。

或许我们可以打开脑洞，如果王小波不死，他除了文学创作，在互联网领域，可以去混论坛成为老榕、陈彤一般的人物，可以去创业成为张朝阳、丁磊，可以去布道成为凯文凯利……也可能在博客微博时代成为公知代表，也可能形象崩塌一败涂地，也可能成为自媒体达人每次打赏无数……

但这都不是王小波。做极客的王小波与做知识分子的王小波，是一个硬币的两面，用编程的写作互证，才能找到一个血肉丰满的王小波。


一个有趣但笔力未到上限就消逝的中国卡夫卡作家。
一个比高晓松还丑却用封封情书撩到银河的痴汉。
一个成功混迹小说圈的程序员。

这些都是王小波。
用丑丑微笑面对世界的王小波；
通过自己努力改变生活的王小波；
在热爱面前，愿意倾尽所有的王小波。"
怎样评价《数码宝贝》第一部中的泉光子郎的编程水平？,"受到 @夜路川 答主勇于用python进化自己室友的激励，我顺便深挖了一下《数码宝贝》第一部第五集中光子郎在电脑上敲出的代码，终于把原始代码跑了出来，视频在最后。
《数码宝贝》第一部第五集截图

虽然这段代码会自己乱动并让甲虫兽进化，显得狂拽酷炫吊炸天，但其实和第十集出现的代码是一模一样的（而动画里表现出的效果明显不同）。第十集里的代码反而看得更清楚一点。
《数码宝贝》第一部第十集截图

根据这张图抽出文本如下：
100 /* func sample. coast creation */
110 float s
120 while s<1 or s>=2
130     input ""ratio 1 to 2"";s
140 endwhile
150 s = (s-1)/10+1
160 screen 1,2,1,1
170 s=sqr(s*s-1)
180 float x0=100, x1=412, y0=0, y1=0
190 fractal(x0,x1,y0,y1,1)
200 line(100, 50, 412, 50, 255, 65535)
210 end
220 func fractal(x0;float,x1;float,y0;float,y1;float,sp;int)
230     float l, r, x2, y2
240     l=sqr((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0))
250     if l<2 or sp>=9 then {
260         line(x0,y0/3+50,x1,y1/3+50,255,65535) : return()
270     }
280     r=rnd()+rnd()+rnd()-2
290     x2=(x0+x1)/2+s*(y1-y0)*r
300     y2=(y0+y1)/2+s*(x0-x1)*r
310     sp = sp + 1
320     fractal(x0,x2,y0,y2,sp)
330     fractal(x2,x1,y2,y1,sp)
340 endfunc

如果想重新原汁原味地运行这段代码，首先要明确它的语言和版本。注意到注释和变量定义的语法更接近C系语言，但还有endwhile、func、endfunc等关键字，可以确定这不是VB或者其他主流的BASIC系语言。但是代码行号的格式暴露了这货肯定是个远古产物，我本来想看看光子郎电脑上这个文件的后缀名是什么，瞅了半天发现是“名称未设定 3”（见上图），失去线索的我只能开始疯狂的google……

在资料检索过程中主要发现两个问题。一是和这段代码语法相近的语言太多，比如VFP（Visual FoxPro，知道它的人肯定都老了）、VimScript、SAP采用的ABAP、早期PHP、伪代码的某个版本[1]、乃至德仪计算器的自创脚本语言等等。经过一个个的尝试，发现这些语言都是形似神不似，并不是真正的答案。
Google Books里找到的一本TI计算器手册

第二个问题是，如果仔细看光子郎的代码，你一定会陷入困惑，因为这段代码根本不像是有一个统一的语法规则。这里举两个栗子：
流程控制语法不统一。120-140行的while-endwhile结构，或许让你觉得和BASIC有一点点类似，而且顺便猜测if语句肯定也会有个endif结尾。但是250-270行的if语句居然用了大括号，更丧心病狂的是在then后面接大括号！
变量声明格式不统一。110行是类C的声明格式，而220行的函数参数却用了类似ECMAScript的声明方式，但用的不是冒号是分号。这让我一度以为这段代码就是导演魔改的，是一种不存在的噩梦般的语言。

然而，在我就要放弃之际，一位国外先行者的博文给了我曙光（尽管文章里有一些错误）[2]。这个语言最终还是被查出来了……

事情要追溯到1987年，夏普发布了一款型号为X68000的PC。作为那个年代的电脑，搭载了10MHz的摩托罗拉68000CPU，1MB的内存，没有硬盘，且只在日本发售[3]。其操作系统是夏普为这一系列电脑专门设计的Human68k，《数码宝贝》中的那段代码，就属于这个操作系统专有的编程语言X-BASIC[4]。
Sharp X68000ACE-HD
X-BASIC手册
日本维基上X-BASIC的一段例程

这个系列的最后一款电脑在1993年发布（配置有所增强），而《数码宝贝》第一部是在1999年放映的，可见在动画制作时期，光子郎的代码也不算特别陈旧。

为了实际地跑一下这段代码，又经过一番艰辛的努力，我搞到了X68000的模拟器，还有操作系统Human68k（version 3.02）的磁盘映像，现在还能找到这些东西，真的要感谢极客阿宅们的默默奉献。

在模拟器里一开机，感觉就成功了一半：

为了能使代码顺利运行，还需加载SX-WINDOW映像。最后终于找到X-BASIC，一字不差地键入了光子郎的代码：

执行run命令，按代码要求输入一个1到2之间的浮点数值，下面就是见证奇迹的时刻了！
00:48
运行《数码宝贝》光子郎写的代码

我不禁望向窗外的那只放屁虫，它仍在很悠闲地晒太阳，很遗憾我的甲虫兽并没有进化……原因很简单，这真的只是一段随机生成「coast」轮廓的代码。初始输入是一个阈值，从视频里看，显然阈值越高「海岸」越险峻，阈值越低「海岸」越平滑，很有可能是摘取了当时哪个游戏里地图生成器的一段源码。所以，导演又糊弄事呢？

为了跑这段代码，我查到了一些资料和工具，在此罗列一下，有兴趣可以看看。
X-BASIC文档（日文）：
http://ww3.enjoy.ne.jp/~zoomark/ip/xb/xb_frm.html

X68000 Emulator in Java：
https://stdkmd.net/xeij/

Human68k磁盘映像（日文）：
http://retropc.net/x68000/software/sharp/human302/

X68000相关资料（日文）：
http://retropc.net/x68000/book/x68book.htm

Programming Languages Database：
http://www.epocalc.net/php/liste_langue.php

最后话说回光子郎的编程水平，这段代码的难点主要在于用递归实现了分形图形的绘制，虽然没什么特别神秘的地方，但还是需要一定程度的编程技能和数学知识。原理上很像我之前绘制谢尔宾斯基三角形的代码：

但是光子郎当时好像上小学四年级？

而且在动画里，这段程序的输出是这样的，光子郎最后靠这个成功还原了他和美美所在的迷宫。

嘛，单从这里看，感觉能进科大少年班就是了……

彩蛋：当年X68000系列的电脑还随附一个名为060turbo[5]的软件，单独装在一个磁盘。这个软件的唯一功能是在屏幕上随机打印一张复杂的分形图形（疑似Mandelbrot图像？并不是很确定）。我用模拟器试了一下，效果确实惊艳，感觉光子郎在成为分形大师的路上还需努力23333。
参考
^Pseudocode Examples https://www.unf.edu/~broggio/cop3530/3530pseu.htm
^Running Izzy's ""Digivolving"" code https://digitalworldproblems.tumblr.com/post/76036641581/while-im-looking-at-that-moviecode-post-he
^X68000 https://en.wikipedia.org/wiki/X68000
^X-BASIC https://ja.wikipedia.org/wiki/X-BASIC
^060turbo の添付ディスク http://retropc.net/x68000/software/hardware/060turbo/disk060t/","受到 @夜路川 答主勇于用python进化自己室友的激励，我顺便深挖了一下《数码宝贝》第一部第五集中光子郎在电脑上敲出的代码，终于把原始代码跑了出来，视频在最后。
《数码宝贝》第一部第五集截图

虽然这段代码会自己乱动并让甲虫兽进化，显得狂拽酷炫吊炸天，但其实和第十集出现的代码是一模一样的（而动画里表现出的效果明显不同）。第十集里的代码反而看得更清楚一点。
《数码宝贝》第一部第十集截图

根据这张图抽出文本如下：
100 /* func sample. coast creation */
110 float s
120 while s<1 or s>=2
130     input ""ratio 1 to 2"";s
140 endwhile
150 s = (s-1)/10+1
160 screen 1,2,1,1
170 s=sqr(s*s-1)
180 float x0=100, x1=412, y0=0, y1=0
190 fractal(x0,x1,y0,y1,1)
200 line(100, 50, 412, 50, 255, 65535)
210 end
220 func fractal(x0;float,x1;float,y0;float,y1;float,sp;int)
230     float l, r, x2, y2
240     l=sqr((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0))
250     if l<2 or sp>=9 then {
260         line(x0,y0/3+50,x1,y1/3+50,255,65535) : return()
270     }
280     r=rnd()+rnd()+rnd()-2
290     x2=(x0+x1)/2+s*(y1-y0)*r
300     y2=(y0+y1)/2+s*(x0-x1)*r
310     sp = sp + 1
320     fractal(x0,x2,y0,y2,sp)
330     fractal(x2,x1,y2,y1,sp)
340 endfunc

如果想重新原汁原味地运行这段代码，首先要明确它的语言和版本。注意到注释和变量定义的语法更接近C系语言，但还有endwhile、func、endfunc等关键字，可以确定这不是VB或者其他主流的BASIC系语言。但是代码行号的格式暴露了这货肯定是个远古产物，我本来想看看光子郎电脑上这个文件的后缀名是什么，瞅了半天发现是“名称未设定 3”（见上图），失去线索的我只能开始疯狂的google……

在资料检索过程中主要发现两个问题。一是和这段代码语法相近的语言太多，比如VFP（Visual FoxPro，知道它的人肯定都老了）、VimScript、SAP采用的ABAP、早期PHP、伪代码的某个版本[1]、乃至德仪计算器的自创脚本语言等等。经过一个个的尝试，发现这些语言都是形似神不似，并不是真正的答案。
Google Books里找到的一本TI计算器手册

第二个问题是，如果仔细看光子郎的代码，你一定会陷入困惑，因为这段代码根本不像是有一个统一的语法规则。这里举两个栗子：
流程控制语法不统一。120-140行的while-endwhile结构，或许让你觉得和BASIC有一点点类似，而且顺便猜测if语句肯定也会有个endif结尾。但是250-270行的if语句居然用了大括号，更丧心病狂的是在then后面接大括号！
变量声明格式不统一。110行是类C的声明格式，而220行的函数参数却用了类似ECMAScript的声明方式，但用的不是冒号是分号。这让我一度以为这段代码就是导演魔改的，是一种不存在的噩梦般的语言。

然而，在我就要放弃之际，一位国外先行者的博文给了我曙光（尽管文章里有一些错误）[2]。这个语言最终还是被查出来了……

事情要追溯到1987年，夏普发布了一款型号为X68000的PC。作为那个年代的电脑，搭载了10MHz的摩托罗拉68000CPU，1MB的内存，没有硬盘，且只在日本发售[3]。其操作系统是夏普为这一系列电脑专门设计的Human68k，《数码宝贝》中的那段代码，就属于这个操作系统专有的编程语言X-BASIC[4]。
Sharp X68000ACE-HD
X-BASIC手册
日本维基上X-BASIC的一段例程

这个系列的最后一款电脑在1993年发布（配置有所增强），而《数码宝贝》第一部是在1999年放映的，可见在动画制作时期，光子郎的代码也不算特别陈旧。

为了实际地跑一下这段代码，又经过一番艰辛的努力，我搞到了X68000的模拟器，还有操作系统Human68k（version 3.02）的磁盘映像，现在还能找到这些东西，真的要感谢极客阿宅们的默默奉献。

在模拟器里一开机，感觉就成功了一半：

为了能使代码顺利运行，还需加载SX-WINDOW映像。最后终于找到X-BASIC，一字不差地键入了光子郎的代码：

执行run命令，按代码要求输入一个1到2之间的浮点数值，下面就是见证奇迹的时刻了！
0
正在为你切换到720P，请稍候…
运行《数码宝贝》光子郎写的代码

我不禁望向窗外的那只放屁虫，它仍在很悠闲地晒太阳，很遗憾我的甲虫兽并没有进化……原因很简单，这真的只是一段随机生成「coast」轮廓的代码。初始输入是一个阈值，从视频里看，显然阈值越高「海岸」越险峻，阈值越低「海岸」越平滑，很有可能是摘取了当时哪个游戏里地图生成器的一段源码。所以，导演又糊弄事呢？

为了跑这段代码，我查到了一些资料和工具，在此罗列一下，有兴趣可以看看。
X-BASIC文档（日文）：
http://ww3.enjoy.ne.jp/~zoomark/ip/xb/xb_frm.html

X68000 Emulator in Java：
https://stdkmd.net/xeij/

Human68k磁盘映像（日文）：
http://retropc.net/x68000/software/sharp/human302/

X68000相关资料（日文）：
http://retropc.net/x68000/book/x68book.htm

Programming Languages Database：
http://www.epocalc.net/php/liste_langue.php

最后话说回光子郎的编程水平，这段代码的难点主要在于用递归实现了分形图形的绘制，虽然没什么特别神秘的地方，但还是需要一定程度的编程技能和数学知识。原理上很像我之前绘制谢尔宾斯基三角形的代码：

但是光子郎当时好像上小学四年级？

而且在动画里，这段程序的输出是这样的，光子郎最后靠这个成功还原了他和美美所在的迷宫。

嘛，单从这里看，感觉能进科大少年班就是了……

彩蛋：当年X68000系列的电脑还随附一个名为060turbo[5]的软件，单独装在一个磁盘。这个软件的唯一功能是在屏幕上随机打印一张复杂的分形图形（疑似Mandelbrot图像？并不是很确定）。我用模拟器试了一下，效果确实惊艳，感觉光子郎在成为分形大师的路上还需努力23333。
参考
^Pseudocode Examples https://www.unf.edu/~broggio/cop3530/3530pseu.htm
^Running Izzy's ""Digivolving"" code https://digitalworldproblems.tumblr.com/post/76036641581/while-im-looking-at-that-moviecode-post-he
^X68000 https://en.wikipedia.org/wiki/X68000
^X-BASIC https://ja.wikipedia.org/wiki/X-BASIC
^060turbo の添付ディスク http://retropc.net/x68000/software/hardware/060turbo/disk060t/","2020年，光子郎用Python打开了数码宝贝世界的大门，也象征着我们的青春结束了。





不说别的，就看他写了什么。
坐标是数码宝贝第一部的第五集
这是和 黑安杜鲁兽 战斗时
光子郎用来进化甲虫兽的代码
发现这大概像一段VB代码。不敢确定。
根据诸位大佬的研究，光子郎的代码是X-Basic
破千了！！ 十分感谢各位大佬的抬爱。在各位大佬的指正下，把这个看不清楚写错的文本修正一下。
转文本如下：
100 /* func sample.coast creation */
110 float s
120 while s<1 or s>=2
130  input ""ratio 1 to 2"";s
140 endwhile
150 s = (s-1)/10+1
160 screen 1,2,1,1
170 s=sqr(s*s-1)
180 float x0=100, x1=412, y0=0, y1=0
190 fractal(x0,x1,y0,y1,1)
200 line(100,50,412,50,255,65535)
210 end
220 func fractal(x0;float,x1;float,y0;float,y1;float,sp;int)
230  float l,r,x2,y2
240  l=sqr((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0))
250  if l<2 or sp>=9 then (
260   line(x0,y0/3+50,x1,y1/3+50,255,65535) :return()
270  )
280  r=rnd()+rnd()+rnd()-2
290  x2=(x0+x1)/2+s*(y1-y0)*r
300  y2=(y0+y1)/2+s*(x0-x1)*r
310  sp = sp + 1
320  fractal(x0,x2,y0,y2,sp)
330  fractal(x2,x1,y2,y1,sp)
340 endfunc
对这段代码的个人理解如下：
定义一个浮点数 s
当 s<1 或 s>=2
s = input(""ratio 1 to 2"")
s = (s-1)/10+1
screen 估计是一个类？不知道有什么用
大佬指出 这是一个屏幕控制命令
sqr 估计是开方函数 s = s^2-1
定义四个浮点数
调用fractal函数 他给这个自定函数叫 分形
调用又一个自定函数 line 接受6个参数最后程序建了模所以估计是一个画线函数
这里声明前面的fractal函数 这还是一个递归函数
前面不知道变量s是啥所以这个代码从这里开始可读
经过大佬指出，s变量是x2,y2值的一个参数
四个浮点数
这是求两点距离的公式 l 是两点距离
如果这个距离小于2 或者 sp>=9
画条线后返回？
rnd 应该是随机数函数
递归调用
在这里根据编程语言的通性，笔者用python大概重构了一下这份代码。希望能够进化我的舍友。
基于前辈和大佬，对这份代码进一步修改：
import matplotlib.pyplot as plt
import numpy as np
import math
import random
x_r = []
y_r = []
def fractal(x0,x1,y0,y1,sp):
    l = math.sqrt((x1-x0)*(x1-x0)+(y1-y0)*(y1-y0))
    if l<2 or sp>=9 :
        x_r.append(x0)
        x_r.append(x1)
        y_r.append(y0)
        y_r.append(y1)
        return
    r = random.random()+random.random()+random.random()-2
    x2=(x0+x1)/2+float(s)*(y1-y0)*r
    y2=(y0+y1)/2+float(s)*(x0-x1)*r
    sp = sp+1 
    fractal(x0,x2,y0,y2,sp)
    fractal(x2,x1,y2,y1,sp)

s = 0
while True:
    if float(s) < 1 or float(s) >=2:
        s = input(""ratio 1 to 2\n"")
    else:
        break
fractal(100,412,0,0,1)
plt.plot(x_r,y_r)
plt.show()
运行结果如下：
s = 1.1
s = 1.2

光子郎的结果：
好吧只是抽了两张比较像的

甲虫兽表示身体发烫。充满力量。
愿伟大的祖国繁荣富强，国庆节快乐。","前方多图，流量预警
————————————————————————
友情提示，本文配合此音乐服用效果更佳：
07 - Digital Scratch! ~～光子郎のテーマ～#2 [-] Digital Scratch! ~Koushirou no Theme~ #2
有句话叫做不看广告看疗效，我们就直接来看看光子郎都有过哪些优秀操作吧。
光子郎的成就不完全统计：
1.成功分析出了动力室的程序，并且用程序手动进化了甲虫兽（技术宅威武）。
2.成功获取遗迹的地图，并且还建立了语音通讯来指导美美如何走出这个迷宫一样的地方。
3.分析了发现希望徽章后出现的那个山洞里面的程序，直接得出了数码世界是建立在现实世界之上的结论。（我觉得这段是光子郎最神的一幕。）
4.发现了分子兽在金字塔之下的密道。
5.基本上找出了石盘上卡牌摆放的内在规律。（之前在水底，玄内说的那些东西也基本上只有他才能完全理解，最后干脆单独和他说。）
6.成功设置好了玄内传给他的“数码结界”程序，正是靠着这个程序才保护了他一家人的安全。
（你看不见我~你看不见我~你看不见我……）
7.连接了巨鲸兽的视觉系统可以看见巨鲸兽所看见的，并且还配合嘉儿的哨声完成了一个“声纳系统”。
8.通过查询玄内老人给他的数码宝贝图鉴，光子郎发现了战斗暴龙兽的杀手锏“恐龙克星”，给了孩子们一针强心剂。
9.虽然一开始由于使用电脑造成暴露目标，但是光子郎很快就把他和太一的方位变成了”禁忌的多重存在“让敌人一头雾水。
10.没错，重头戏来了。在剧场版《我们的战争游戏》里，光子郎开始疯狂地秀起了操作(值得一提的是，在另一部同为细田守指导的电影《夏日大作战》里，主角也是一个技术宅)：
(1).看一个人的技术水平，可以看和他交流的都是些什么水平的人（光子郎自己也说过，在数码世界里最希望的事就是回到家上网发邮件给他的朋友）：
当然了，更diao的在后面，这水是有多深…
(2).小试牛刀，几下子就成功连上ISDN网络。
(3).在由于地狱使者兽入侵导致掉线以后，通过卫星电话连接上了外国节点再次进入了网络。
(4).最后的关头，光子郎意识到BOSS的速度太快导致无法锁定，直接快速把巨量的邮件全转发到BOSS的邮箱，于是，BOSS卡机了……，被奥米加兽成功击杀。
10.剧场版里的夏天过去了，在第二部的故事里光子郎依然风头强劲，多次发挥重要作用。
(1).仅靠一张杂志照片就大概分析出了一乘寺贤家所在的大体位置（细思极恐）。
(2).提出只要有D3暴龙机（顺便说一下这个名字也是他给取的），任何一台上网的电脑都可以打开数码世界大门的假设并且应验。
整个第二部里的光子郎，基本上分析与联络玄内的事情大部分都是他在做，作为一代二代补充性质的广播剧《两年半的休假》里也提到光子郎一直就联系着玄内并且早就知道了被选召的孩子们不止他们几个了。
给第二部主角做知识辅导也是经常的事情。比如解释数码宝贝的合体进化（他还专门为此新做了一个词：“Joint + Progress=Jogress”），又比如下图里向一乘寺贤解释为什么新的被选召的孩子们的神圣计划会变形。
11.而在第二部的剧场版《超恶魔兽的反击》里一开始，光子郎就充当了一个召集者的角色（毕竟网络世界要是出了什么异常肯定是他最先知道的）。
在太一阿和都要把最重要的戏份让给新主角，阿助差不多永远在考试or复习的情况之下，光子郎在技术支援方面的戏份还是那么吃重，真是让人不禁有些唏嘘——
好了关于他的事绩基本上说得差不多了，不得不提的是他还有一个非常可贵的品质：
对计算机的专注。
第一集开始就在自己一个人摆弄电脑。
太一觉得“电脑敲一下就好”，被光子郎赶紧拦下了。
还是素娜最能了解别人的感受啊。
唉…并且作为一个光美党，我要先去哭会儿…：
由于只注意遗迹里的文字，不理会美美，结果人家都气哭了，说他是个笨蛋。（一声叹息）
不过也就是在这个岛上，美美明白了光子郎研究文字的意义，光子郎也明白了不能单纯靠电脑的运算。于是到了第二部的剧场版里大家就玩得很开心了…
总之不管别的了，反正技术宅你今年一定要把美美给追到手啊听到了吗！加油！QAQ
新PV出了，美美早已看穿了一切，哈哈。
————————————————————————————————
11月新剧场版上映更新！
《数码宝贝大冒险Tri.》的第一章「再会」已经上线了。
我们的光子郎依旧是操作犀利,意识超前,输出恐怖。
距离第二部已经又过了3年，人类世界再度出现迷之怪物。
八个孩子们再度聚首，不得不说光子郎还是那个最能透彻地分析情况的人啊（这时要是能再响起技术宅专属BGM就好啦）：
第二，神圣计划发生故障（被阿武先说了）
（不过在这里还是要小小吐槽一下，你们倒是好好听光子郎讲的啊…果然光子郎的水平已经进化到了大家都不明觉厉的程度了吗？……诶诶，太一跟阿和怎么又吵起来啦。扶额）
（还有阿助啊……你其实是专程来虐狗的吧！~我也想问，对方是人类吗…【喂！）
(把光子郎都惊呆了…)
（哈哈哈此刻大家的表情都神同步了）
好了，接下来光子郎开始蓄能了，大家赶紧做好心理准备。
先是和阿武聊天的时候，表示自己早已是买买买的一员了（按照剧场版的设定那还是在05年啊）。
（其实光子郎你的小心思啊，其实大家都明白的啦…）
接下来就又是光子郎的秀操作时间了，为了挑选好看的衣服，他开发了一款“光子郎环游世界”（大雾）软件。即使宅在家里也可以各种衣服换着穿啦。
（哈哈，甲虫兽你真是为光子郎操碎了心啊）
好啦，镜头一转，我们又来到了……
嗯，看来美国网友真的是没白交啊。
前方核能预警！
看到这儿的时候我已经不由自主地献上了膝盖…
一个电脑制作的虚拟空间可以快速地了存入和取出数码宝贝，简直就像是自己造了一个“数码世界”一样啊。这时光子郎的帅气程度我感觉已经超越分析出数码世界奥秘那集了。
终于，就在光子郎的办公室里，数码宝贝总算是有了媲美隔壁棚精灵球一样的黑科技了（虽说六代好像也有类似的技术，不过对于大冒险系列来说这还是首次吧）。虽然端口携带不是很方便，但是也可以用数量来弥补嘛。
相信不少人会有一个疑问，太一明明把护目镜送给了大辅，为什么在Tri.又戴上护目镜了呢？
嘿嘿，答案就是光子郎熬夜只睡了三个小时给太一做了新的护目镜！
技术宅亲手制作的护目镜当然不止是用来耍帅的。
戴上以后才发现另有玄机（谷歌赶紧开发这样的应用吧，哪怕只是模拟的也好啊）
而太一也正是通过这个在摩天轮上发现了巨大的数据错位。
故弄玄虚装神秘的阿尔法兽出现了。光子郎马上动用电脑里的图鉴（肯定也是优化过的了，还带扫描分析的）。只可惜相关数据还是太少了。
是的，第一章里光子郎的表现就是这么抢眼。
但我还是要说！光子郎你就不要再各种迷之脸红啦，赶紧就从了美美吧！你看看连阿助都有女朋友了（喂！），你到底还在等什么呢？
众人：有情况
加油啊光子郎！明年再见！
————————————————————————————————
《数码宝贝大冒险Tri.》的第二章「决意」上映更新！
光子郎依旧充当着的技术核心作用。总是能第一个知道有突发情况出现并且及时地通知给大家。
并且一直在根据最新情况分析这次危机的原因：
说到这个感染的问题啊…
喂！数码兽你们又在乘机卖萌了！萌死我算了…
哈哈不过他们也不用太担心，因为光子郎也不是毫无准备的啊：
在收到一封神秘电子邮件后，他进行了解析，果然又是与数码世界有关的信息。不过答案真正揭晓，又是在之后的事情了。
在扭曲消失以后光子郎及时地打开了观测数码世界的窗口（虽然不能够进入，但是在数码世界的数码兽能听到电脑那头孩子们的声音）：
呐呐呐，至于光子郎和美美的事情呢…
怎么说呢…光子郎说了句“美美太以自我为中心了”。美美的心里明显是很不好受的（当时第一反应：？？？我去，官方你不要这样…）
嘛。不过乐天的美美还是在大家（特别是望月芽心）的鼓励下调整好了状态。光子郎更是看到她的照片立马就跑过来了。
哈哈一副要面试了的表情：
哈哈哈光子郎你还是蛮帅的。不过不要老是害羞啦勇敢一点吧！你看美美多大方啊。
————————————————————————————————
《数码宝贝大冒险Tri.》的第三章「告白」上映更新
这章，光子郎也陷入困难了，虽然他可能已经算是孩子们里面知道的最多了。
数码兽们，还是被感染了……而且还不止一只，甚至光子郎也清理不出头绪……
光子郎开始没日没夜地钻研，几近崩溃的状态。没办法，这集他是主角，真正的考验来了。
当然光子郎毕竟是光子郎。从这句话里就能够看出来。
感觉甲虫兽的话是互文，“希望”对应的是光子郎的“知识”。
终于，光子郎调查清楚了！错位的发生是因为原本的二进制被篡改成了一个数码数据无法处理的计数法。
而光子郎很快也通过数据分析知道了感染发生的根源
最后关头，光子郎还在错位空间里创建了一个备份场，不单能使数码宝贝不被重启，还能剔除感染。可惜最后一个都没有留住，哭瞎了QAQ
调整好了数码世界的坐标（之前也是他一直在联系众人再回去）
图鉴再度发挥了作用
就这样，被选召的孩子们又一次前往数码世界展开了冒险……
光子郎的故事，未完待续。"
学 Python 都用来干嘛的？,我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。,"python能做太多有趣的事了，看看我是怎么玩的
先动动小手关注一下呀 @朱卫军 ，已经写了几百篇原创技术回答和文章，后续会继续努力！
自动发邮件
自动化操作excel
最近做了个Python办公自动化的Live讲座，里面对技术讲得更加详细
广告
如何利用python进行自动化办公？
作者 朱卫军
¥9.99
去查看
大家有什么编程或者求职的问题可以在值乎向我提问哈
朱卫军
53 次咨询
4.9
Python优秀回答者
汽车制造业 数据分析师
去咨询
定制酷炫二维码
下载视频、MP3
爬虫
HTML\网页自动生成PDF
从PDf中抽取图表
制作可视化图表
地理空间分析
数据分析
连接数据库
机器学习
正则表达式
文本转音频
淘宝抢购
OCR识别
如果你不知道如何学习python，入门困难
如果你想从事数据分析，学习分析技术
如果你想学习sql
如果你想学习tableau
如果你想选择一些好的python技术书
广告
Python编程 从入门到实践 第3版（图灵出品）
京东
¥69.80
去购买
广告
利用Python进行数据分析 原书第3版
京东
¥96.90
去购买
Python基础知识小技巧

看到这里，大家不要忘了关注朱卫军哦，还写了好多好多好多~","能写的东西可太多了，日常生活的有这么些有趣的教程：
比如哄哄女朋友：Python导出微信聊天记录并生成词云，备用地址：
向手机发送通知：教你如何使用Python向手机发送通知(IFTTT)，备用地址：
Python实用宝典：教你如何使用Python向手机发送通知(IFTTT)
38 赞同 · 23 评论 文章
文献搜索工具：你不得不知道的python超级文献搜索工具，备用地址:
Python实用宝典：你不得不知道的python超级文献搜索工具
112 赞同 · 34 评论 文章
制作日历：Excel+Python=精美壁纸日历 任意DIY
检测人脸是否佩戴口罩：20行代码检测人脸是否佩戴口罩，备用地址：
打水印：超简单Python安全批量打水印教程！
提取音乐高潮：Python 制作音乐高潮副歌提取器，备用地址：
如果你想成为超级极客，可以看看这些文章：

树莓派+智能音箱：Python声控普通风扇、Python声控开机
树莓派+摄像头：Python人脸识别开机
Python 深度学习图像风格迁移

想看更多
更多有趣的Python教程欢迎关注公众号：Python实用宝典
或者访问网站：Python实用宝典","熊孩子浏览器
我们家娃喜欢看电视，一看就没够，为了让她在看电视的时候做点儿有意义的事情，我用python做了一个小程序，叫bear_kids_player. 说起来也简单，就是在播放视频的时候每隔一段时间弹出一个对话框，里面有一个问题，让孩子输入。答对了对话框就销毁，然后视频就接着播放；答不对，对话框就一直在那里，视频停止。
最初的设定只是让孩子输入字母或者做做加法，后来加了一点改进，目前可以显示图片，并且自动朗读显示的单词。
具体安装只要用pip install bear_kids_player 就可以。
安装结束以后，用如下命令可以启动：
import bear_kids_player
import run_bear_kids_player
run_bear_kids_player.run_bear_kids_player()
ctrl+o 可以打开视频
ctrl +F2 可以关闭视频
在 .../bear_kids_player 文件加下有一个config.csv 文件，可以对一些参数进行设定
比如：Intervals(间隔时间)， 打开文件的快捷方式，关闭文件的快捷方式，题库筛选的阈值，题库筛选所需的类型
另外还有一个questions.csv 文件，这是一个题库。这个题库可以自己输入题目，答案，类型，以及想要显示在对话框里的图片链接，可以依据个人的情况自己添加题目。
下面是一个简单的演示
当然由于朗读功能使用的是gtts实际上链接google获取音频的，所以在国内可能朗读功能会不那么好用。不过本来也就给自己娃写的程序，倒是也没指望推广。
python的主程序用的pyqt5，总共用了我大概一周业余时间完成，由于对一些库以及发布python包不是很熟悉所以浪费了很多时间。
此外，视频解码程序是K-Lite_Codec_Pack_1526_Basic（17MB），可以从

下载到，需要安装解码程序才能对常见的视频格式进行支持。

家里的娃娃三岁半，原本小写字母认不熟，许多字母会搞混譬如p，q，g，d，b，还有一些小写字母认不出，教了无数遍都不上心学。自从使用了这个程序大概三天左右，小写字母都差不多认识了。增加了单词输入题目以后，娃娃只用了两天就可以不依赖我的帮助，自己把我事先设定的10个单词准确输入了。我们家娃从来没接触过键盘，有这个成绩我还比较满意。
后面可能会做些升级，比如要求娃朗读，然后用pyttsx库做语音识别输入；或者去掉她输入熟练的单词的显示，让她依据读音输入单词。或者换些加减法等数学问题。总之慢慢添加新功能。
程序没有很认真地注释，距离工业级水平相差甚远，目前就是东拼西凑 能用就行的状态，不喜勿喷。","学习了Python其实可做很多事情，首先你可以找一份好工作！！
来看看这份职业规划书
学了Python我们选的工作：
web开发工程师
人工智能工程师
数据分析师
爬虫工程师
自动化运维工程师
自动化测试工程师
当然，如果你想自己做一些事情，比如爬一下喜欢的图片，爬某个网站，或者是抢火车票都可以，下面我们就来说说具体的！
想聊私密话题，就用Python来做个聊天器
配套资料：https://pan.baidu.com/s/12mlxhKw1tFPSDuAZkkBLKQ 提取码：i1or
节假日抢不到火车票，不用怕，用Python全自动抢票
配套资料：https://pan.baidu.com/s/1E3O-gFBbzaUcjtvSBROBtg 提取码：9epq
想去吃饭游玩不知道哪好，用Python实现实时比较
配套资料：https://pan.baidu.com/s/1FcO28DBQIrFqZ1_dTyRitw 提取码：yem6
想换工作，可以利用Python爬取适合你的职位信息哦！
配套资料：https://pan.baidu.com/s/1_JankxPLCvwqpD8MR7ZoqQ 提取码：edrg
用Python搭建你想搭建的系统
配套资料：https://pan.baidu.com/s/1jHMLUT4H-Bf1EYKlDZjwIQ 提取码：6arw
用Python搭建聊天机器人
配套资料：https://pan.baidu.com/s/11hUdZjrmjI91vk-hF61uug 提取码：quha
更多Python用途（想学习哪个可以直接私信我获取哦）：

关于Python的学习，可以看Python入门教程完整版，600集让你轻松入门Python！
Python入门教程完整版（懂中文就能学会）
配套资料：https://pan.baidu.com/s/12-dymJ8FjWzh6b5NKJuP3Q 提取码：gqly","如果你还没有开始使用Python，答应我，把这个回答看完，如果你真的学习并深入使用过Python，我想你一定会爱上他，并且对于Python的未来充满期待。
对于Python而言，不光是简洁的语法，它广泛的应用场景，完善的语言生态，丰富的库，都吸引着我不断地探索，接下来，我分两个方向和大家聊一聊 Python在各个领域中的降龙伏虎之能，不要走开，我们一起探索一下。
首先来说一下极其推荐的方向：
1、数据分析
可能几年之前，说到数据分析，你并不会想到Python，但不知从什么时候开始，数据分析师的简历上，Python已经成了最亮眼的加分项。各种数据分析框架的出现，让Python这种本就极其简单的语言更加方便易用，让数据分析师可以将更多的经历放在数据本身。而后随之而来的各种数据可视化框架，也让数据分析工作不再需要切换不同的语言不同的软件，将所有的工作集中交给Python，他都可以用最简单便捷的方式帮你完成。
话说数据分析是当下一个非常热门的方向，如果你想学习的话，可以学习知乎知学堂推出的官方课程，学习3天，只需要1毛钱。知乎数据分析大V猴子老师讲课，近距离跟大佬学习。
学习数据分析方法，通过方法拆解任务问题，思维+方法双重进阶，告别数据小白。
快来报名吧！
数据分析 3 天实战训练营
￥0.10
已失效

2、科学计算
曾几何时，讲到科学计算，我们想到的就是几个头发花白的老教授在实验室里不停的计算，但如今，我们每个人都可以站在巨人的肩膀上进行科学计算，这个巨人就是丰富的科学计算库，我们只需要几行或者十几行代码就可以做到数据的预测，评估，图像的判别，修复，路线的规划，修改等，随着近几年Facebook，Google，百度等大厂的加入，Python在科学计算方向的地位水涨创高，现在已经成为数据挖掘，机器学习，人工智能等的第一编程语言，相信过不了多久，可能我们人人都是数据科学家吧。
3、大数据框架
大数据现在可是风口，不亚于10年左右的移动互联，怎么能少了Python的身影呢！近几年Python你在大数据领域的发展也是风生水起，虽然无论是实时还是离线计算，Python你的性能都是远不如Scala与Java的，但是Python的易用性，以及丰富的库，大大提高了大数据开发者的工作效率，同时，Python能够更好的兼容各种科学计算库，让大数据的开发从根本上规避了各种复杂的技术问题，摆在我们面签的更多是业务，程序员的个人能力被各种框架无限放大，知道项目上线前的一刻，你可能还不知道自己原来如此优秀。
4、脚本开发
通常，脚本编写是指编写小程序以让简单任务自动化。从简单的定时开机关机，批量修改删除文件，到复杂的游戏外挂，自动抢票，整点自动秒杀，再到企业级的定时任务脚本，自动化运维，自动化测试等等都是脚本的应用，简单的开发过程，以及强大的功能，让Python可以在脚本编写领域和Shell有一较高下之力。
5、爬虫
说道Python就不得不说说爬虫，很多人了解Python都是从爬虫开始的， 至于为什么，我只能说，贴近生活，简单高效，既可以解决工作，生活中的数据需求，又可以做些私活赚点外快，何乐而不为呢？
6、Web框架
很多人都认为Web方向是Java的赛道，没错，现在市场上90%的web服务还是java实现的，但是由于Python服务的简单高效以及完美的扩展性，让技术门槛变得非常低，几行代码就可以制作一个简易的Web服务器，现在有多少大学生的第一个博客项目就是Python编写的呢？
再说一下可以做，但不推荐的方向：
1、嵌入式应用
对于嵌入式应用，我不在行，但是我知道Python可以配合Rasberry Pi工作。它在那些硬件发烧友中非常流行。
2、游戏
您可以用PyGame库来开发游戏，但是，它不是最流行的游戏引擎。如果把游戏作为兴趣爱好，您可以用它来构建项目，但是，如果您真的要做游戏开发，我个人不建议选择它。
相反，我推荐您用Unity的C#脚本，它是最流行的游戏引擎之一。它允许您在很多平台上构建游戏，这些平台包括：Mac、Windows、iOS和安卓。
3、桌面应用
您可以用Python的Tkinter来开发，但是它似乎不是最流行的选择。相反，用Java、C#和C++等语言开发桌面应用看起来更流行。最近，一些公司也已经开始使用JavaScript来创建桌面应用程序了。比如，Slack的桌面应用程序是用Electron来构建的。它允许您用JavaScript来构建桌面应用。
就我个人来说，如果我要构建一个桌面应用，我会用JavaScript。它允许您复用Web版本的某些代码（如果有的话）。
当然，Python的能量不仅仅如此！！！我们一起期待Python带给我们的其他震撼吧。
希望我的解答可以对大家有所帮助，也欢迎大家随时补充交流。"
